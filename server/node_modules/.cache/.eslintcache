[{"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\index.js":"1","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\reportWebVitals.js":"2","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\App.js":"3","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Navbar.js":"4","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Feed.js":"5","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Post.js":"6","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\PostCreate.js":"7","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\PostText.js":"8","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\api\\axios.js":"9","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\CommentCreate.js":"10","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Comment.js":"11","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\RegisterCheck.js":"12","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\BirthdayPicker.js":"13","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Profile.js":"14","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Friends.js":"15","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\app\\store.js":"16","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\authSlice.js":"17","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\registerSlice.js":"18","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\loginSlice.js":"19","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\feedSlice.js":"20","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\api\\socketManager.js":"21","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Friend.js":"22","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Chat.js":"23","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\FriendsChats.js":"24","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatBox.js":"25","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\chatSlice.js":"26","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatMessage.js":"27","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatSendMessage.js":"28","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatUnit.js":"29","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\SuggestedFriends.js":"30"},{"size":865,"mtime":1696462154670,"results":"31","hashOfConfig":"32"},{"size":362,"mtime":1694783389000,"results":"33","hashOfConfig":"32"},{"size":4535,"mtime":1696547111458,"results":"34","hashOfConfig":"32"},{"size":12348,"mtime":1696461713652,"results":"35","hashOfConfig":"32"},{"size":2397,"mtime":1696547243041,"results":"36","hashOfConfig":"32"},{"size":9025,"mtime":1696528615911,"results":"37","hashOfConfig":"32"},{"size":1757,"mtime":1696462248367,"results":"38","hashOfConfig":"32"},{"size":777,"mtime":1696456756816,"results":"39","hashOfConfig":"32"},{"size":200,"mtime":1696553228424,"results":"40","hashOfConfig":"32"},{"size":1733,"mtime":1696528609307,"results":"41","hashOfConfig":"32"},{"size":5505,"mtime":1696528604887,"results":"42","hashOfConfig":"32"},{"size":11419,"mtime":1696459558399,"results":"43","hashOfConfig":"32"},{"size":728,"mtime":1695772475000,"results":"44","hashOfConfig":"32"},{"size":13172,"mtime":1696547356258,"results":"45","hashOfConfig":"32"},{"size":3577,"mtime":1696545233712,"results":"46","hashOfConfig":"32"},{"size":505,"mtime":1696462145028,"results":"47","hashOfConfig":"32"},{"size":829,"mtime":1696542150007,"results":"48","hashOfConfig":"32"},{"size":1233,"mtime":1695770929000,"results":"49","hashOfConfig":"32"},{"size":616,"mtime":1695770936000,"results":"50","hashOfConfig":"32"},{"size":520,"mtime":1696294730419,"results":"51","hashOfConfig":"32"},{"size":905,"mtime":1696553259670,"results":"52","hashOfConfig":"32"},{"size":3872,"mtime":1696547526552,"results":"53","hashOfConfig":"32"},{"size":735,"mtime":1696530392355,"results":"54","hashOfConfig":"32"},{"size":1299,"mtime":1696530941917,"results":"55","hashOfConfig":"32"},{"size":2552,"mtime":1696530389475,"results":"56","hashOfConfig":"32"},{"size":976,"mtime":1696351689647,"results":"57","hashOfConfig":"32"},{"size":1599,"mtime":1696462385311,"results":"58","hashOfConfig":"32"},{"size":2497,"mtime":1696528590939,"results":"59","hashOfConfig":"32"},{"size":3745,"mtime":1696531361256,"results":"60","hashOfConfig":"32"},{"size":1723,"mtime":1696547538635,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"33j3rl",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"81"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"86"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\index.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\App.js",["172","173"],[],"import Navbar from \"./components/Navbar\";\nimport Feed from \"./components/Feed\";\nimport RegisterCheck from \"./components/RegisterCheck\";\nimport Profile from \"./components/Profile\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setUserOb, setLoggedIn } from \"./features/authSlice\";\nimport api from \"./api/axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport Alert from \"@mui/material/Alert\";\nimport { setAlertMsg } from \"./features/authSlice\";\nimport { setUpdate } from \"./features/feedSlice\";\nimport { sendMessage } from \"./api/socketManager\";\nimport Chat from \"./components/Chat\";\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector((state) => state.auth.isLoggedIn);\n  const update = useSelector((state) => state.feed.update);\n  const userOb = useSelector((state) => state.auth.userOb);\n  const navigate = useNavigate();\n  const alertMsg = useSelector((state) => state.auth.alertMsg);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      api\n        .get(\"/getprofile?user=\" + userOb._id)\n        .then((res) => {\n          dispatch(setUserOb(res.data));\n        })\n        .catch((err) => {\n          console.log(\"Error: \", err);\n        });\n    } else {\n      navigate(\"/login\");\n    }\n  }, [update]);\n\n  const displayAlert = (type) => {\n    if (alertMsg === \"\") return \"\";\n    if (alertMsg.includes(\"successfully\")) {\n      return <Alert severity=\"success\">{alertMsg}</Alert>;\n    } else {\n      return <Alert severity=\"error\">{alertMsg}</Alert>;\n    }\n  };\n\n\n  const alertTimeoutRef = useRef(null);\n\n  const changeAlert = (msg) => {\n    if (alertTimeoutRef.current) {\n      clearTimeout(alertTimeoutRef.current);\n    }\n\n    dispatch(setAlertMsg(msg));\n\n    alertTimeoutRef.current = setTimeout(() => {\n      dispatch(setAlertMsg(\"\"));\n    }, 3000);\n  };\n\n  const removeFriend = (friendId) => {\n\n    sendMessage(\"removeFriend\", { userId: userOb._id, friendId: friendId }, (response) => {\n      if (response.success) {\n        dispatch(setUserOb(response.data));\n        dispatch(setUpdate());\n      } else {\n        api\n          .post(\"/removefriend\", {\n            userId: userOb._id,\n            friendId: friendId,\n          })\n          .then((res) => {\n            changeAlert(\"Friend Removed\");\n            dispatch(setUserOb(res.data.data));\n          })\n          .catch((err) => {\n            changeAlert(\"There was a problem removing this friend!\")\n          });\n      }\n    }\n    )\n  };\n\n  const handleFriendRequest = (friendId, notificationId, accept) => {\n\n    sendMessage(\"friendRequest\", { userId: userOb._id, friendId: friendId, notification: notificationId, accept: accept }, (response) => {\n      if (response.success) {\n        dispatch(setUserOb(response.data));\n        dispatch(setUpdate());\n      } else {\n        api\n          .post(\"/friendrequest\", {\n            userId: userOb._id,\n            friendId: friendId,\n            notification: notificationId,\n            accept: accept,\n          })\n          .then((res) => {\n            dispatch(setUpdate());\n          })\n          .catch((err) => {\n            changeAlert(\"There was a problem handling this friend request!\")\n          });\n      }\n    }\n    )\n  }\n\n\n\n  const handleLogOut = () => {\n    dispatch(setUserOb(null));\n    dispatch(setLoggedIn(false));\n  };\n\n  return (\n    <div>\n      <Navbar\n\n        handleLogOut={handleLogOut}\n        handleFriendRequest={handleFriendRequest}\n        changeAlert={changeAlert}\n      />\n      {displayAlert()}\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            isLoggedIn ? (\n              <Feed\n\n                userID={userOb._id}\n                userOb={userOb}\n                removeFriend={removeFriend}\n                changeAlert={changeAlert}\n              />\n            ) : (\n              <RegisterCheck route=\"login\" changeAlert={changeAlert} />\n            )\n          }\n        />\n        <Route path=\"/register\" element={<RegisterCheck route=\"register\" changeAlert={changeAlert} />} />\n        <Route path=\"/login\" element={<RegisterCheck route=\"login\" changeAlert={changeAlert} />} />\n\n        <Route\n          path=\"/profile/:userId\"\n          element={<Profile changeAlert={changeAlert} handleFriendRequest={handleFriendRequest} removeFriend={removeFriend} />}\n        />\n        <Route path=\"/chat\" element={<Chat />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Navbar.js",["174","175","176"],[],"import * as React from \"react\";\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Typography from \"@mui/material/Typography\";\nimport Menu from \"@mui/material/Menu\";\nimport MenuIcon from \"@mui/icons-material/Menu\";\nimport Container from \"@mui/material/Container\";\nimport Avatar from \"@mui/material/Avatar\";\nimport Button from \"@mui/material/Button\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport AdbIcon from \"@mui/icons-material/Adb\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setUpdate } from \"../features/feedSlice\";\nimport { setUserOb } from \"../features/authSlice\";\nimport Badge from '@mui/material/Badge';\nimport { useState, useEffect } from 'react';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport Divider from '@mui/material/Divider';\nimport FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';\nimport CircleNotificationsIcon from '@mui/icons-material/CircleNotifications';\nimport Stack from '@mui/material/Stack';\nimport api from \"../api/axios\";\nimport { registerMessageHandler, unregisterMessageHandler } from '../api/socketManager';\nimport {\n  Popover, List, ListItem,\n} from '@mui/material';\n\n\n\n\nconst pages = [\"Feed\", \"Chat\"];\nconst settings = [\"Profile\", \"Settings\", \"Logout\"];\n\nconst Navbar = ({ handleLogOut, handleFriendRequest }) => {\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [anchorElNav, setAnchorElNav] = useState(null);\n  const [anchorElUser, setAnchorElUser] = useState(null);\n  const [anchorElNot, setAnchorElNot] = useState(null);\n  const [anchorElNotUser, setAnchorElNotUser] = useState(null);\n  const isLoggedIn = useSelector((state) => state.auth?.isLoggedIn);\n  const userOb = useSelector((state) => state.auth?.userOb);\n\n\n  useEffect(() => {\n    const handleMessage = (data) => {\n      dispatch(setUserOb(data));\n      dispatch(setUpdate());\n\n\n    };\n    registerMessageHandler('notification', handleMessage);\n\n    return () => {\n      unregisterMessageHandler('notification');\n    }\n\n  },);\n\n\n  const handleOpenNavMenu = (event) => {\n    setAnchorElNav(event.currentTarget);\n  };\n  const handleOpenUserMenu = (event) => {\n    setAnchorElUser(event.currentTarget);\n  };\n\n  const handleOpenNotifications = (event) => {\n    setAnchorElNot(event.currentTarget);\n  };\n\n\n\n\n  const unSeenNotifications = () => {\n    let count = 0;\n    userOb.notifications?.forEach((notification) => {\n      if (!notification.seen) {\n        count++;\n      }\n    })\n    return count;\n  }\n\n  const handleCloseNavMenu = (page) => {\n    switch (page) {\n      case \"Feed\":\n        dispatch(setUpdate());\n        navigate(\"/\");\n        break;\n      case \"Chat\":\n        navigate(\"/chat\");\n        break;\n      case \"Profile\":\n        navigate(`/profile/${userOb._id}`);\n\n        break;\n      case \"Settings\":\n        navigate(\"/settings\");\n        break;\n      case \"Logout\":\n        handleLogOut();\n        navigate(\"/login\");\n        break;\n    }\n    setAnchorElNav(null);\n    setAnchorElUser(null);\n  };\n\n  const handleCloseNotifications = (notification, clicked) => {\n    setAnchorElNot(null);\n    setAnchorElNotUser(null);\n    api.post('/seennotifications', {\n      user: userOb._id\n    }).then((res) => {\n      dispatch(setUpdate());\n    }).catch((err) => {\n      console.log(\"Error: \", err);\n    });\n    if(clicked) navigate(`/profile/${notification.userId._id}`);\n\n  };\n\n  const handleCloseUserNot = (notification) => {\n    setAnchorElNotUser(null);\n  };\n\n\n  const handleCloseUserMenu = () => {\n \n    setAnchorElUser(null);\n\n  };\n\n  return (\n    <div>\n      <AppBar position=\"static\" >\n        <Container maxWidth=\"100%\">\n          <Toolbar disableGutters>\n            <AdbIcon sx={{ display: { xs: \"none\", md: \"flex\" }, mr: 1 }} />\n            <Typography\n              variant=\"h6\"\n              noWrap\n              component=\"a\"\n              href=\"/\"\n              sx={{\n                mr: 2,\n                display: { xs: \"none\", md: \"flex\" },\n                fontFamily: \"monospace\",\n                fontWeight: 700,\n                letterSpacing: \".3rem\",\n                color: \"inherit\",\n                textDecoration: \"none\",\n              }}\n            >\n              LOGO\n            </Typography>\n\n            <Box sx={{ flexGrow: 1, display: { xs: \"flex\", md: \"none\" } }}>\n              <IconButton\n                size=\"large\"\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleOpenNavMenu}\n                color=\"inherit\"\n              >\n                <MenuIcon />\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorElNav}\n                anchorOrigin={{\n                  vertical: \"bottom\",\n                  horizontal: \"left\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"left\",\n                }}\n                open={Boolean(anchorElNav)}\n                onClose={handleCloseNavMenu}\n                sx={{\n                  display: { xs: \"block\", md: \"none\" },\n                }}\n              >\n                {pages.map((page) => (\n                  <MenuItem key={page} onClick={() => handleCloseNavMenu(page)}>\n                    <Typography textAlign=\"center\">{page}</Typography>\n                  </MenuItem>\n                ))}\n              </Menu>\n            </Box>\n            <AdbIcon sx={{ display: { xs: \"flex\", md: \"none\" }, mr: 1 }} />\n            <Typography\n              variant=\"h5\"\n              noWrap\n              component=\"a\"\n              href=\"/\"\n              sx={{\n                mr: 2,\n                display: { xs: \"flex\", md: \"none\" },\n                flexGrow: 1,\n                fontFamily: \"monospace\",\n                fontWeight: 700,\n                letterSpacing: \".3rem\",\n                color: \"inherit\",\n                textDecoration: \"none\",\n              }}\n            >\n              LOGO\n            </Typography>\n            <Box sx={{ flexGrow: 1, display: { xs: \"none\", md: \"flex\" } }}>\n              {pages.map((page) => (\n                <Button\n                  key={page}\n                  onClick={() => handleCloseNavMenu(page)}\n                  sx={{ my: 2, color: \"white\", display: \"block\" }}\n                >\n                  {page}\n                </Button>\n              ))}\n            </Box>\n\n\n\n            <Box sx={{ flexGrow: 0 }}>\n              {isLoggedIn ? (\n                <>\n                  <Tooltip title=\"Open settings\">\n                    <div>\n                      <IconButton onClick={handleOpenNotifications}>\n                        <Badge className=\"mr3\" color=\"secondary\" badgeContent={unSeenNotifications() || 0}>\n                          <CircleNotificationsIcon />\n                        </Badge>\n                      </IconButton>\n\n                      <Popover\n                        sx={{\n                          mt: \"45px\", '.MuiPaper-root': {\n                            borderRadius: '15px',\n                          }\n                        }}\n                        id=\"notification-popover\"\n                        anchorEl={anchorElNot}\n                        anchorOrigin={{\n                          vertical: \"top\",\n                          horizontal: \"right\",\n                        }}\n                        keepMounted\n                        transformOrigin={{\n                          vertical: \"top\",\n                          horizontal: \"right\",\n                        }}\n                        open={Boolean(anchorElNot)}\n                        onClose={() => handleCloseNotifications(null, false)}\n                      >\n                        <div style={{\n                          maxHeight: '500px',\n                          overflowY: 'auto',\n                          scrollbarWidth: 'none',\n                          msOverflowStyle: 'none'\n                        }}>\n\n                          <style>\n                            {`\n              ::-webkit-scrollbar {\n                width: 0;\n                background: transparent;\n              }\n            `}\n                          </style>\n                          <List subheader={\n                            <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                              Notificatios\n                            </ListSubheader>\n                          }>\n                            {userOb.notifications.toReversed().map((notification) => (\n\n                              <React.Fragment key={notification._id}>\n\n                                <Divider variant=\"middle\" sx={{ borderTop: '1px dashed' }} />\n                                <ListItem\n\n                                  onClick={() => handleCloseNotifications(notification, true)}\n                                >\n\n                                  {!notification.seen ? <FiberManualRecordIcon className='mr2' fontSize='small' color=\"primary\" /> : null}\n\n                                  <Avatar>\n                                    <img alt={notification.userId.avatar} src={notification.userId.avatar} />\n                                  </Avatar>\n                                  <Typography sx={{ ml: 1, mr: 2 }} textAlign=\"center\">\n                                    <span style={{\n                                      color: '#1976d2',\n\n                                    }}>\n                                      {notification.userId.name}\n                                    </span>\n                                    {notification.text}\n                                  </Typography>\n                                  {notification.text.includes(\"sent you a friend\") ? (\n                                    <Stack spacing={1} direction=\"row\">\n                                      <Button variant=\"contained\" onClick={(e) => { handleFriendRequest(notification.userId._id, notification._id, true); e.preventDefault(); }} size=\"small\">Accept</Button>\n                                      <Button variant=\"outlined\" onClick={(e) => { handleFriendRequest(notification.userId._id, notification._id, false); e.preventDefault(); }} size=\"small\">Deny</Button>\n                                    </Stack>\n\n                                  ) : null}\n\n                                </ListItem>\n\n                              </React.Fragment>\n                            ))}\n                          </List>\n                        </div>\n                      </Popover>\n\n                      <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\n                        <Avatar>\n                          <img alt={userOb.name} src={userOb.avatar} />\n                        </Avatar>\n                      </IconButton>\n\n                    </div>\n                  </Tooltip>\n                </>\n              ) : null\n              }\n              <Menu\n                sx={{\n                  mt: \"45px\", '.MuiPaper-root': {\n                    borderRadius: '15px',  // Adjust this value for desired roundedness\n                  }\n                }}\n                id=\"menu-appbar\"\n                anchorEl={anchorElUser}\n                anchorOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: \"top\",\n                  horizontal: \"right\",\n                }}\n                open={Boolean(anchorElUser)}\n                onClose={handleCloseUserMenu}\n              >\n                {settings.map((setting) => (\n                  <MenuItem\n                    key={setting}\n\n                    onClick={() => handleCloseNavMenu(setting)}\n                  >\n                    <Typography textAlign=\"center\">{setting}</Typography>\n                  </MenuItem>\n                ))}\n              </Menu>\n            </Box>\n          </Toolbar>\n        </Container>\n\n      </AppBar>\n\n    </div>\n  );\n};\nexport default Navbar;\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Feed.js",["177","178","179"],[],"import { useEffect, useState } from \"react\";\r\nimport Post from \"./Post\";\r\nimport PostCreate from \"./PostCreate\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport api from \"../api/axios\";\r\nimport { Grid } from \"@mui/material\";\r\nimport Friends from \"./Friends\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setAlertMsg } from \"../features/authSlice\";\r\nimport { setUpdate, setPosts } from \"../features/feedSlice\";\r\nimport SuggestedFriends from \"./SuggestedFriends\";\r\n\r\nconst Feed = ({ removeFriend }) => {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n    const update = useSelector((state) => state.feed?.update);\r\n    const posts = useSelector((state) => state.feed.posts);\r\n    useEffect(() => {\r\n        api\r\n            .get(\"/feed?user=\" + userID)\r\n            .then((res) => {\r\n                dispatch(setPosts(res.data.feed));\r\n                console.log(res.data.suggestedFriends)\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Error: \", err);\r\n            });\r\n    }, [update]);\r\n\r\n    const userOb = useSelector((state) => state.auth?.userOb);\r\n    const userID = userOb._id;\r\n    const { friendPosts, myPosts } = !posts\r\n        ? { friendPosts: [], myPosts: [] }\r\n        : posts;\r\n    const totalPosts = friendPosts?.concat(myPosts);\r\n    const totalPostsSorted = totalPosts?.sort((a, b) => {\r\n        return new Date(b.date) - new Date(a.date);\r\n    });\r\n\r\n\r\n    return (\r\n        <div style={{ marginTop: \"20px\", width: \"100%\" }}>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12} md={2}>\r\n                    <Friends navigate={navigate}  removeFriend={removeFriend} />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={8}>\r\n                    <PostCreate setUpdate={setUpdate} update={update} />\r\n\r\n                    <Stack spacing={2} sx={{ marginTop: \"10px\" }}>\r\n                        {totalPostsSorted?.map((post) => (\r\n                            <Post navigate={navigate} key={post._id} post={post} />\r\n                        ))}\r\n                    </Stack>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={2}>\r\n                    <SuggestedFriends navigate={navigate}/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Feed;\r\n",[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Post.js",["180","181"],[],"import * as React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport { red } from '@mui/material/colors';\r\nimport { styled } from '@mui/material/styles';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport api from \"../api/axios\";\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport AddCommentIcon from '@mui/icons-material/AddComment';\r\nimport CommentCreate from './CommentCreate';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Comment from './Comment';\r\nimport Badge from '@mui/material/Badge';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport Divider from '@mui/material/Divider';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setUpdate } from '../features/feedSlice';\r\nimport { setPosts } from '../features/feedSlice';\r\nimport { sendMessage } from '../api/socketManager';\r\n\r\n\r\nconst Post = ({ post, changeAlert, navigate }) => {\r\n    const dispatch = useDispatch();\r\n    const [expanded, setExpanded] = React.useState(false);\r\n    const { description, date, likes, comments } = post;\r\n    const { name, email, _id, avatar } = post.userId;\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    const userOb = useSelector((state) => state.auth?.userOb);\r\n    const userId = userOb._id;\r\n\r\n\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const DeletePost = () => {\r\n        api\r\n            .post(\"/deletepost\", {\r\n                postId: post._id,\r\n                userId: userId,\r\n            })\r\n            .then((res) => {\r\n                dispatch(setUpdate());\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Error: \", err);\r\n            });\r\n    }\r\n\r\n\r\n    const handleExpandClick = () => {\r\n        setExpanded(!expanded);\r\n    };\r\n\r\n\r\n    const StyledBadge = styled(Badge)(({ theme }) => ({\r\n        '& .MuiBadge-badge': {\r\n            right: -6,\r\n            top: 15,\r\n            border: `2px solid ${theme.palette.background.paper}`,\r\n            padding: '0 4px',\r\n        },\r\n    }));\r\n\r\n    const ExpandMore = styled((props) => {\r\n        const { expand, ...other } = props;\r\n        return <IconButton {...other} />;\r\n    })(({ theme, expand }) => ({\r\n        transform: !expand ? 'rotate(0deg)' : 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    }));\r\n\r\n    let postDate;\r\n    let todayDate;\r\n    let dates;\r\n    let times;\r\n\r\n    const compareDates = (postDateA) => {\r\n\r\n        const postFullDate = new Date(postDateA);\r\n        const todayFullDate = new Date()\r\n        postDate = new Date(postFullDate.getFullYear(), postFullDate.getMonth(), postFullDate.getDate());\r\n        todayDate = new Date(todayFullDate.getFullYear(), todayFullDate.getMonth(), todayFullDate.getDate());\r\n        dates = date.toString().substring(0, 10);\r\n        times = date.toString().substring(11, 16);\r\n        if (postDate.getTime() === todayDate.getTime()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    const like = () => {\r\n\r\n        sendMessage(\"like\", { userId: userId, postId: post._id }, (response) => {\r\n            if (response.success) {\r\n                dispatch(setPosts(response.data));\r\n            } else {\r\n                api.post(\"/like\", {\r\n                    postId: post._id,\r\n                    userId: userId,\r\n                }).then((res) => {\r\n                    dispatch(setPosts(res.data));\r\n                })\r\n                    .catch((err) => {\r\n                        changeAlert(\"There was a problem liking this post\")\r\n                    });\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    const unlike = () => {\r\n        sendMessage(\"unlike\", { userId: userId, postId: post._id }, (response) => {\r\n            if (response.success) {\r\n                dispatch(setPosts(response.data));\r\n            } else {\r\n                api.post(\"/unlike\", {\r\n                    postId: post._id,\r\n                    userId: userId,\r\n                }).then((res) => {\r\n                    dispatch(setPosts(res.data.data));\r\n                })\r\n                    .catch((err) => {\r\n                        changeAlert(\"There was a problem unliking this post\")\r\n                    });\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Card sx={{ width : '100%', borderRadius: '20px' }}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\" onClick={() => {  navigate(`/profile/${_id}`); }}>\r\n                        <img src={avatar}></img>\r\n                    </Avatar>\r\n                }\r\n\r\n                action={\r\n\r\n                    userId === _id ? (\r\n                        <div>\r\n                            <IconButton aria-label=\"settings\" onClick={handleClick}  >\r\n                                <MoreVertIcon />\r\n                            </IconButton>\r\n                            <Menu\r\n                                id=\"simple-menu\"\r\n                                anchorEl={anchorEl}\r\n                                open={Boolean(anchorEl)}\r\n                                onClose={handleClose}\r\n                                sx={{\r\n                                    '.MuiPaper-root': {\r\n                                        borderRadius: '10px',\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <MenuItem onClick={handleClose}><EditIcon style={{ color: 'blue' }} />  Edit</MenuItem>\r\n                                <Divider sx={{ my: 1 }} />\r\n\r\n                                <MenuItem onClick={() => {\r\n                                    DeletePost();\r\n                                    handleClose();\r\n                                }}><DeleteIcon style={{ color: 'red' }} />Delete</MenuItem>\r\n                            </Menu>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n\r\n                title={name}\r\n                subheader={compareDates(date) ? times : dates + \" \" + times}\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" style={{ wordWrap: \"break-word\", overflowWrap: \"break-word\", maxHeight: \"someValuepx\", overflowY: \"auto\" }}>\r\n\r\n                    {description}\r\n\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions disableSpacing>\r\n                <IconButton aria-label=\"like\">\r\n                    <StyledBadge badgeContent={likes.length} color=\"secondary\">\r\n                        {likes.includes(userId) ?\r\n                            <FavoriteIcon style={{ color: 'red' }} onClick={() => unlike()} />\r\n                            :\r\n                            <FavoriteBorderIcon onClick={() => like()} />}\r\n                    </StyledBadge>\r\n                </IconButton>\r\n\r\n                <ExpandMore\r\n                    expand={expanded}\r\n                    onClick={handleExpandClick}\r\n                    aria-expanded={expanded}\r\n                    aria-label=\"show more\"\r\n                >\r\n\r\n\r\n                    <Badge badgeContent={comments.length} color=\"primary\">\r\n                        <AddCommentIcon />\r\n                    </Badge>\r\n                </ExpandMore>\r\n\r\n            </CardActions>\r\n            <Divider variant=\"middle\" />\r\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\r\n                <CardContent  >\r\n                    <CommentCreate post={post} changeAlert={changeAlert} />\r\n                    <div style={{ overflow: 'hidden' }}>\r\n                        <div style={{ maxHeight: \"700px\", overflowY: \"scroll\" }}>\r\n\r\n                            {comments.length ? (comments.map((comment, i) => {\r\n                                return (\r\n                                    <Comment navigate={navigate} changeAlert={changeAlert} key={i} postId={post._id} StyledBadge={StyledBadge} comment={comment} compareDates={compareDates} />\r\n                                )\r\n                            })\r\n                            ) : \"No comments yet\"}\r\n                        </div>\r\n                    </div>\r\n\r\n                </CardContent>\r\n            </Collapse>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Post;",[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\PostCreate.js",["182","183","184"],[],"import PostText from './PostText';\r\nimport * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setUpdate } from '../features/feedSlice';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport api from '../api/axios';\r\nimport PhotoIcon from '@mui/icons-material/Photo';\r\n\r\nconst PostCreate = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState(\"\");\r\n  const userOb = useSelector((state) => state.auth?.userOb);\r\n\r\n  const handlePost = (text) => {\r\n    setText(\"\");\r\n    api\r\n      .post(\"/post\", {\r\n        user: userOb._id,\r\n        description: text,\r\n      })\r\n      .then((res) => {\r\n        dispatch(setUpdate());\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"Error: \", err);\r\n      });\r\n\r\n  }\r\n  \r\n  const clickEnter = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handlePost(text)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card sx={{ borderRadius:'15px' }}>\r\n    <CardContent>\r\n    <Stack spacing={1} direction=\"row\" sx={{ display: 'flex', width: '100%' }}>\r\n      <Avatar  aria-label=\"recipe\">\r\n        <img src={userOb.avatar}></img>\r\n      </Avatar>\r\n\r\n      <PostText setText={setText} text={text} clickEnter={clickEnter}   placeholder={\"Tell us your story\"} />\r\n      <Button variant=\"contained\" size=\"small\" sx={{ borderRadius: '20px' }} onClick={() => { handlePost(text); }}>Post</Button>\r\n      \r\n    </Stack>\r\n    </CardContent>\r\n      </Card>\r\n  );\r\n}\r\n\r\nexport default PostCreate;","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\PostText.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\api\\axios.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\CommentCreate.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Comment.js",["185"],[],"import * as React from 'react';\r\n\r\nimport Card from '@mui/material/Card';\r\nimport CardHeader from '@mui/material/CardHeader';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport { red } from '@mui/material/colors';\r\nimport Menu from '@mui/material/Menu';\r\nimport api from \"../api/axios\";\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setUpdate, setPosts } from '../features/feedSlice';\r\nimport { sendMessage } from '../api/socketManager';\r\n\r\nexport default function Comment({ postId, comment, compareDates, StyledBadge, navigate, changeAlert }) {\r\n    const dispatch = useDispatch();\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const userOb = useSelector((state) => state.auth?.userOb);\r\n    const userID = userOb._id;\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    const DeleteComment = () => {\r\n        api\r\n            .post(\"/deletecomment\", {\r\n                postId: postId,\r\n                commentId: _id,\r\n                userId: userID,\r\n            })\r\n            .then((res) => {\r\n                dispatch(setUpdate());\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Error: \", err);\r\n            });\r\n    }\r\n\r\n\r\n    const { userId, content, created_at, likes, _id } = comment;\r\n    const { name, avatar } = userId\r\n    let dates = created_at.toString().substring(0, 10);\r\n    let times = created_at.toString().substring(11, 16);\r\n\r\n    const likeComment = () => {\r\n        sendMessage('likeComment', { postId: postId, comment: _id, userId: userID }, (response) => {\r\n            if (response.success) {\r\n                dispatch(setPosts(response.data))\r\n            } else {\r\n                api\r\n                    .post(\"/likecomment\", {\r\n                        postId: postId,\r\n                        comment: _id,\r\n                        userId: userID,\r\n                    })\r\n                    .then((res) => {\r\n                        dispatch(setUpdate());\r\n                    })\r\n                    .catch((err) => {\r\n                        changeAlert(\"There was a problem liking this comment\")\r\n                    });\r\n            }\r\n        }\r\n        )\r\n\r\n    }\r\n\r\n    const unLikeComment = () => {\r\n        api.post(\"/unlikecomment\", { user: userID, postId: postId, comment: _id })\r\n            .then((res) => {\r\n                dispatch(setUpdate());\r\n\r\n            })\r\n            .catch((err) => {\r\n                console.log(\"Error: \", err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"pa2\">\r\n            <Card sx={{ maxWidth: 'auto' }}>\r\n                <CardHeader\r\n                    avatar={\r\n                        <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\" onClick={() => navigate(`/profile/${userId._id}`)}>\r\n                            <img src={avatar}></img>\r\n                        </Avatar>\r\n                    }\r\n                    action={\r\n\r\n                        userID === userId._id ? (\r\n                            <div>\r\n                                <IconButton aria-label=\"settings\" onClick={handleClick}  >\r\n                                    <MoreVertIcon />\r\n                                </IconButton>\r\n                                <Menu\r\n                                    id=\"simple-menu\"\r\n                                    anchorEl={anchorEl}\r\n                                    open={Boolean(anchorEl)}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <MenuItem onClick={handleClose}><EditIcon style={{ color: 'blue' }} />  Edit</MenuItem>\r\n                                    <MenuItem onClick={() => {\r\n                                        DeleteComment();\r\n                                        handleClose();\r\n                                    }}><DeleteIcon style={{ color: 'red' }} />Delete</MenuItem>\r\n                                </Menu>\r\n                            </div>\r\n                        ) : null\r\n                    }\r\n                    title={name}\r\n                    subheader={compareDates(created_at) ? times : dates + \" \" + times}\r\n                />\r\n                <CardContent>\r\n                    <Typography variant=\"body2\" color=\"text.secondary\">\r\n                        {content}\r\n                    </Typography>\r\n                </CardContent>\r\n                <IconButton aria-label=\"like\">\r\n                    <StyledBadge badgeContent={likes.length} color=\"secondary\">\r\n                        {likes.includes(userID) ?\r\n                            <FavoriteIcon style={{ color: 'red' }} onClick={() => unLikeComment()} />\r\n                            :\r\n                            <FavoriteBorderIcon onClick={() => likeComment()} />}\r\n                    </StyledBadge>\r\n                </IconButton>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\RegisterCheck.js",["186","187","188","189","190","191","192","193"],[],"import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  MDBRow,\r\n  MDBCol,\r\n  MDBInput,\r\n  MDBCheckbox,\r\n  MDBBtn,\r\n  MDBIcon,\r\n  MDBTabs,\r\n  MDBTabsItem,\r\n  MDBTabsLink,\r\n  MDBTabsContent,\r\n  MDBTabsPane,\r\n} from \"mdb-react-ui-kit\";\r\nimport io from \"socket.io-client\";\r\nimport BirthdayPicker from \"./BirthdayPicker\";\r\nimport { useState } from \"react\";\r\nimport { initializeSocket, disconnectSocket } from \"../api/socketManager\"\r\nimport api from \"../api/axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setEmail,\r\n  setPassword,\r\n  setRePassword,\r\n  setName,\r\n  setPhone,\r\n  setAddress,\r\n  resetRegState,\r\n} from \"../features/registerSlice\";\r\nimport {\r\n  setLoginEmail,\r\n  setLoginPassword,\r\n  resetLoginState,\r\n} from \"../features/loginSlice\";\r\nimport { setLoggedIn, setUserOb, setAlertMsg } from \"../features/authSlice\";\r\nimport { setUpdate } from \"../features/feedSlice\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport default function RegisterCheck({ route, changeAlert }) {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const [loginRegisterActive, setLoginRegisterActive] = useState(\"register\");\r\n\r\n  const email = useSelector((state) => state.register.email);\r\n  const password = useSelector((state) => state.register.password);\r\n  const rePassword = useSelector((state) => state.register.rePassword);\r\n  const name = useSelector((state) => state.register.name);\r\n  const date = useSelector((state) => state.register.date);\r\n  const phone = useSelector((state) => state.register.phone);\r\n  const address = useSelector((state) => state.register.address);\r\n  const loginEmail = useSelector((state) => state.login.loginEmail);\r\n  const loginPassword = useSelector((state) => state.login.loginPassword);\r\n\r\n  useEffect(() => {\r\n    if (route === \"login\") setLoginRegisterActive(\"login\");\r\n    else setLoginRegisterActive(\"register\");\r\n  }, [route]);\r\n\r\n  const successLogin = (data) => {\r\n    dispatch(setLoggedIn(true));\r\n    dispatch(setUserOb(data.userOb));\r\n    initializeSocket(data.userOb._id);\r\n    setTimeout(() => {\r\n      navigate(\"/\");\r\n    }, 1000);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleLogin = () => {\r\n    api\r\n      .post(\"/login\", {\r\n        email: loginEmail,\r\n        password: loginPassword,\r\n      })\r\n      .then((res) => {\r\n        changeAlert(\"You have logged in successfully!\");\r\n        successLogin(res.data);\r\n      })\r\n      .catch((err) => {\r\n        changeAlert(\"Wrong email or password, please try again!\");\r\n      });\r\n  };\r\n  const handleRegister = () => {\r\n    if (password !== rePassword) {\r\n      changeAlert(\"Passwords do not match!\");\r\n      return;\r\n    }\r\n    if (password.length < 8) {\r\n      changeAlert(\"Password must be at least 8 characters long!\");\r\n      return;\r\n    }\r\n    if (!address) {\r\n      changeAlert(\"Please fill in your address!\");\r\n      return;\r\n    }\r\n    if (!phone) {\r\n      changeAlert(\"Please fill in your phone number!\");\r\n      return;\r\n    }\r\n\r\n    if (!date) {\r\n      changeAlert(\"Please fill in your date of birth!\");\r\n      return;\r\n    }\r\n    if (date > Date.now()) {\r\n      changeAlert(\"Please fill in a valid date of birth!\");\r\n      return;\r\n    }\r\n    api\r\n      .post(\"/register\", {\r\n        email: email,\r\n        password: password,\r\n        name: name,\r\n        address: address,\r\n        phone: phone,\r\n        birthday: new Date(date),\r\n      })\r\n      .then((res) => {\r\n        changeAlert(\"You have signed up to our service successfully!\"\r\n        );\r\n        successLogin(res.data);\r\n      })\r\n      .catch((err) => {\r\n        changeAlert(\"This email address is already in use!\");\r\n      });\r\n    dispatch(resetRegState());\r\n  };\r\n\r\n  const handleSubmit = (action) => {\r\n    if (loginRegisterActive == \"login\") {\r\n      if (loginEmail == \"\" || loginPassword == \"\") {\r\n        changeAlert(\"Please fill in your email address and password\");\r\n        return;\r\n      }\r\n      if (!/\\S+@\\S+\\.\\S+/.test(loginEmail)) {\r\n        changeAlert(\"Please enter a valid email address\");\r\n        return;\r\n      }\r\n      handleLogin();\r\n    } else {\r\n      if (!name) {\r\n        changeAlert(\"Please fill in your name\");\r\n        return;\r\n      } else if (!email) {\r\n        changeAlert(\"Please fill in your email address\");\r\n        return;\r\n      } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\r\n        changeAlert(\"Please enter a valid email address\");\r\n        return;\r\n      } else if (!password) {\r\n        changeAlert(\"Please fill in your password\");\r\n        return;\r\n      }\r\n      handleRegister();\r\n    }\r\n  }\r\n\r\n\r\nreturn (\r\n  <div className=\"ml7 mr7 mt3 shadow-4\" style={{ borderRadius: \"20px\" }}>\r\n    <div className=\"pa4\">\r\n      <MDBTabs pills justify className=\"mb-3\">\r\n        <MDBTabsItem>\r\n          <MDBTabsLink\r\n            onClick={() => setLoginRegisterActive(\"login\")}\r\n            active={loginRegisterActive === \"login\"}\r\n            style={{ borderRadius: \"15px\" }}\r\n          >\r\n            Login\r\n          </MDBTabsLink>\r\n        </MDBTabsItem>\r\n        <MDBTabsItem>\r\n          <MDBTabsLink\r\n            onClick={() => {\r\n              dispatch(resetLoginState());\r\n              setLoginRegisterActive(\"register\");\r\n            }}\r\n            style={{ borderRadius: \"15px\" }}\r\n            active={loginRegisterActive === \"register\"}\r\n          >\r\n            Register\r\n          </MDBTabsLink>\r\n        </MDBTabsItem>\r\n      </MDBTabs>\r\n\r\n      <MDBTabsContent>\r\n        <MDBTabsPane show={loginRegisterActive === \"login\"}>\r\n          <form>\r\n            <div className=\"text-center mb-3\">\r\n              <p>Sign up with:</p>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"facebook-f\" />\r\n              </MDBBtn>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"google\" />\r\n              </MDBBtn>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"twitter\" />\r\n              </MDBBtn>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"github\" />\r\n              </MDBBtn>\r\n            </div>\r\n\r\n            <p className=\"text-center\">or:</p>\r\n\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              type=\"email\"\r\n              id=\"loginEmailInput\"\r\n              label=\"Email address\"\r\n              value={loginEmail || ''}\r\n              onChange={(e) => {\r\n                dispatch(setLoginEmail(e.target.value));\r\n              }}\r\n            />\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              type=\"password\"\r\n              id=\"loginPassInput\"\r\n              autoComplete=\"on\"\r\n              label=\"Password\"\r\n              value={loginPassword || ''}\r\n              onChange={(e) => {\r\n                dispatch(setLoginPassword(e.target.value));\r\n              }}\r\n            />\r\n\r\n            <MDBRow className=\"mb-4\">\r\n              <MDBCol className=\"d-flex justify-content-center\"></MDBCol>\r\n            </MDBRow>\r\n\r\n            <MDBBtn\r\n              type=\"submit\"\r\n              className=\"mb-4 \"\r\n              style={{ borderRadius: \"15px\" }}\r\n              block\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit(\"login\");\r\n\r\n              }}\r\n            >\r\n              Sign in\r\n            </MDBBtn>\r\n\r\n            <div className=\"text-center\">\r\n              <p>\r\n                Not a member?{\" \"}\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={() => {\r\n                    setLoginRegisterActive(\"register\");\r\n                    navigate(\"/register\");\r\n                  }}\r\n                >\r\n                  Register\r\n                </a>\r\n              </p>\r\n            </div>\r\n          </form>\r\n        </MDBTabsPane>\r\n        <MDBTabsPane show={loginRegisterActive === \"register\"}>\r\n          <form>\r\n            <div className=\"text-center mb-3\">\r\n              <p>Sign up with:</p>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"facebook-f\" />\r\n              </MDBBtn>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"google\" />\r\n              </MDBBtn>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"twitter\" />\r\n              </MDBBtn>\r\n\r\n              <MDBBtn floating color=\"secondary\" className=\"mx-1\">\r\n                <MDBIcon fab icon=\"github\" />\r\n              </MDBBtn>\r\n            </div>\r\n\r\n            <p className=\"text-center\">or:</p>\r\n\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              id=\"fullNameInput\"\r\n              label=\"Full Name\"\r\n              value={name || ''}\r\n              onChange={(e) => {\r\n                dispatch(setName(e.target.value));\r\n              }}\r\n            />\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              type=\"email\"\r\n              id=\"emailInput\"\r\n              label=\"Email address\"\r\n              value={email || ''}\r\n              onChange={(e) => {\r\n                dispatch(setEmail(e.target.value));\r\n              }}\r\n            />\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              type=\"password\"\r\n              id=\"passInput\"\r\n              autoComplete=\"on\"\r\n              label=\"Password\"\r\n              value={password || ''}\r\n              onChange={(e) => {\r\n                dispatch(setPassword(e.target.value));\r\n              }}\r\n            />\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              type=\"password\"\r\n              id=\"rePassInput\"\r\n              autoComplete=\"on\"\r\n              label=\"Repeat password\"\r\n              value={rePassword || ''}\r\n              onChange={(e) => {\r\n                dispatch(setRePassword(e.target.value));\r\n              }}\r\n            />\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              id=\"addressInput\"\r\n              label=\"Address\"\r\n              value={address || ''}\r\n              onChange={(e) => {\r\n                dispatch(setAddress(e.target.value));\r\n              }}\r\n            />\r\n            <MDBInput\r\n              className=\"mb-4\"\r\n              id=\"phoneInput\"\r\n              type=\"number\"\r\n              label=\"Phone\"\r\n              value={phone || ''}\r\n              onChange={(e) => {\r\n                dispatch(setPhone(e.target.value));\r\n              }}\r\n            />\r\n            <BirthdayPicker />\r\n\r\n            <MDBCheckbox\r\n              wrapperClass=\"d-flex justify-content-center mb-4\"\r\n              id=\"form8Example6\"\r\n              label=\"I have read and agree to the terms\"\r\n              defaultChecked\r\n            />\r\n\r\n            <MDBBtn\r\n              type=\"submit\"\r\n              className=\"mb-4\"\r\n              style={{ borderRadius: \"15px\" }}\r\n              block\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                handleSubmit();\r\n\r\n              }}\r\n            >\r\n              Sign up\r\n            </MDBBtn>\r\n            <div className=\"text-center\">\r\n              <p>\r\n                Already have an account? <a href=\"/login\">Sign in</a>\r\n              </p>\r\n            </div>\r\n          </form>\r\n        </MDBTabsPane>\r\n      </MDBTabsContent>\r\n    </div>\r\n  </div>\r\n);\r\n  }\r\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\BirthdayPicker.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Profile.js",["194","195","196","197","198","199","200","201","202"],[],"import React from 'react';\r\nimport {\r\n  MDBCol,\r\n  MDBContainer,\r\n  MDBRow,\r\n  MDBCard,\r\n  MDBCardText,\r\n  MDBCardBody,\r\n  MDBCardImage,\r\n  MDBBtn,\r\n  MDBBreadcrumb,\r\n  MDBBreadcrumbItem,\r\n  MDBProgress,\r\n  MDBProgressBar,\r\n  MDBIcon,\r\n  MDBListGroup,\r\n  MDBListGroupItem\r\n} from 'mdb-react-ui-kit';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport TextField from '@mui/material/TextField';\r\n\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Box from '@mui/material/Box';\r\nimport { useRef, useState, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport { sendMessage } from '../api/socketManager';\r\nimport api from '../api/axios'\r\nimport { setUpdate } from '../features/feedSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { IconButton } from '@mui/material';\r\nimport { setInterests } from '../features/authSlice';\r\n\r\nexport default function Profile({ removeFriend, changeAlert, handleFriendRequest }) {\r\n\r\n  const [sent, setSent] = useState(false);\r\n  const [addInterests, setAddInterests] = useState(false);\r\n  const [tmpInterests, setTmpInterests] = useState(null);\r\n  const { userId } = useParams();\r\n  const dispatch = useDispatch();\r\n  const inputRef = useRef(null)\r\n  const user = useSelector((state) => state.auth?.userOb);\r\n  const [profile, setProfile] = useState(null);\r\n  const [isSelf, setIsSelf] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [buttonsDisabled, setButtonsDisabled] = useState({\r\n    addFriend: false,\r\n    removeFriend: false,\r\n    pending: true,\r\n    message: false,\r\n  });\r\n\r\n\r\n  useEffect(() => {\r\n    if (userId === user._id.toString()) {\r\n      setIsSelf(true);\r\n      setProfile(user);\r\n    } else {\r\n      setIsSelf(false);\r\n      api.get(\"/getprofile\", { params: { user: userId } })\r\n        .then((res) => {\r\n          setProfile(res.data);\r\n        })\r\n        .catch((err) => {\r\n          changeAlert(\"Profile not found\");\r\n          setError('Profile not found or other error message.');\r\n        });\r\n\r\n    }\r\n\r\n\r\n  }, [userId, user]);\r\n\r\n  useEffect(() => {\r\n    if (profile) {\r\n      setAvatar(profile.avatar);\r\n    }\r\n  }, [profile]);\r\n\r\n  const [avatar, setAvatar] = useState(profile ? profile.avatar : \"https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava3.webp\")\r\n\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  if (!profile) {\r\n    return (\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          height: '100vh',\r\n          width: '100vw'\r\n        }}\r\n      >\r\n        <CircularProgress />\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  const { name, email, phone, address, birthday, interests } = profile\r\n\r\n  const date = new Date(birthday).toLocaleDateString()\r\n\r\n  const handleInterests = () => {\r\n    if (addInterests) {\r\n      const interestsArr = user.interests;\r\n      const validInterests = interestsArr.filter(interest => interest.length <= 10);\r\n      if (validInterests.length !== interestsArr.length) {\r\n        changeAlert(\"Some interests were too long and have been removed.\");\r\n        dispatch(setInterests(validInterests.join(',')));\r\n      }\r\n      if (validInterests.length === 0) {\r\n        changeAlert(\"No valid interests provided. Interests must be 10 characters or less.\");\r\n        return;\r\n      }\r\n      if (validInterests.length >= 15) {\r\n        changeAlert(\"You can only have up to 15 interests\");\r\n        return;\r\n      }\r\n      api.post('/addinterests', { interests: validInterests, userId: user._id }).then((res) => {\r\n        dispatch(setUpdate());\r\n      })\r\n    }\r\n    setAddInterests(!addInterests)\r\n  }\r\n\r\n\r\n  const handleAddFriend = () => {\r\n    setButtonsDisabled({ ...buttonsDisabled, addFriend: true })\r\n    sendMessage('addFriend', { userId: user._id, friendId: profile._id }, (response) => {\r\n      if (response.success) {\r\n        changeAlert('Friend request sent to ' + profile.name + \" successfully!\");\r\n        setSent(true);\r\n        dispatch(setUpdate());\r\n      } else {\r\n        api.post('/addfriend', { id: user._id, friendId: profile._id }).then((res) => {\r\n          changeAlert('Friend request sent to ' + profile.name + \" successfully!\");\r\n          setSent(true);\r\n          dispatch(setUpdate());\r\n        }).catch((err) => {\r\n          changeAlert(\"There was a problem sending friend request to \" + profile.name)\r\n        }\r\n        );\r\n      }\r\n      setButtonsDisabled({ ...buttonsDisabled, addFriend: false })\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n  const handleUpload = () => {\r\n    inputRef.current.click();\r\n  }\r\n\r\n  const handleFileChange = async event => {\r\n    const fileObj = event.target.files && event.target.files[0];\r\n    if (!fileObj) {\r\n      return;\r\n    }\r\n    event.target.value = null;\r\n    const base64 = await convertToBase64(fileObj)\r\n    setAvatar(base64)\r\n    api.post('/uploadpic', { base64: base64, id: user._id }).then((res) => {\r\n      dispatch(setUpdate());\r\n    })\r\n\r\n  }\r\n\r\n\r\n  const convertToBase64 = (file) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const fileReader = new FileReader();\r\n      fileReader.readAsDataURL(file);\r\n      fileReader.onload = () => {\r\n        resolve(fileReader.result);\r\n\r\n      };\r\n      fileReader.onerror = (error) => {\r\n\r\n        reject(error);\r\n      };\r\n    })\r\n\r\n  }\r\n\r\n  const checkIfFriends = () => {\r\n    const friends = user.friends.map(friend => {\r\n      return friend._id\r\n    })\r\n\r\n    if (!isSelf && friends.includes(profile._id)) {\r\n      return (\r\n        <>\r\n          <MDBBtn onClick={() => removeFriend(profile._id)}>Remove Friend</MDBBtn>\r\n          <MDBBtn outline className=\"ms-1\">Message</MDBBtn>\r\n        </>\r\n      )\r\n    } else {\r\n      const myRequests = user.receivedfriendRequests;\r\n      const mySentRequests = user.sentfriendRequests;\r\n\r\n      if (mySentRequests?.find(req => req.userId == profile._id))\r\n        return (\r\n          <MDBBtn onClick={() => changeAlert(\"You have already sent friend request to \" + profile.name)}>Pending</MDBBtn>\r\n        )\r\n      if (myRequests?.find(req => req.userId == profile._id))\r\n        return (\r\n          <>\r\n            <MDBBtn onClick={() => handleFriendRequest(profile._id, null, true)}>Accept</MDBBtn>\r\n            <MDBBtn outline className=\"ms-1\" onClick={() => handleFriendRequest(profile._id, null, false)}>Deny</MDBBtn>\r\n          </>\r\n        )\r\n      return (\r\n        <MDBBtn onClick={() => handleAddFriend()} disabled={buttonsDisabled.addFriend}>Add Friend</MDBBtn>\r\n      )\r\n    }\r\n  }\r\n  return (\r\n    <section style={{ backgroundColor: '#eee' }}>\r\n      <MDBContainer className=\"py-5\">\r\n        <MDBRow>\r\n          <MDBCol>\r\n            <MDBBreadcrumb className=\"bg-light rounded-3 p-3 mb-4\">\r\n              <MDBBreadcrumbItem active>User Profile</MDBBreadcrumbItem>\r\n            </MDBBreadcrumb>\r\n          </MDBCol>\r\n        </MDBRow>\r\n\r\n        <MDBRow>\r\n          <MDBCol lg=\"4\">\r\n            <MDBCard className=\"mb-4\">\r\n              <MDBCardBody className=\"text-center\">\r\n                <MDBCardImage\r\n                  src={avatar}\r\n                  alt=\"avatar\"\r\n                  className=\"rounded-circle\"\r\n                  style={{ width: '150px' }}\r\n                  fluid />\r\n\r\n                <div className=\"d-flex justify-content-center mb-2 mt3\">\r\n                  {user._id !== profile._id ? (\r\n                    <>\r\n                      {checkIfFriends()}\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <input\r\n                        style={{ display: 'none' }}\r\n                        ref={inputRef}\r\n                        type=\"file\"\r\n                        accept=\".png, .jpg, .jpeg\"\r\n                        onChange={handleFileChange}\r\n                      />\r\n                      <MDBBtn outline className=\"ms-1\" onClick={() => { handleUpload() }}>Upload Avatar</MDBBtn>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n\r\n            <MDBCard className=\"mb-4 mb-lg-0\">\r\n              <MDBCardBody className=\"p-0\">\r\n                <MDBListGroup flush className=\"rounded-3\">\r\n                  <MDBListGroupItem className=\"d-flex justify-content-between align-items-center p-3\">\r\n                    <MDBIcon fas icon=\"globe fa-lg text-warning\" />\r\n                    <MDBCardText>https://mdbootstrap.com</MDBCardText>\r\n                  </MDBListGroupItem>\r\n                  <MDBListGroupItem className=\"d-flex justify-content-between align-items-center p-3\">\r\n                    <MDBIcon fab icon=\"github fa-lg\" style={{ color: '#333333' }} />\r\n                    <MDBCardText>mdbootstrap</MDBCardText>\r\n                  </MDBListGroupItem>\r\n                  <MDBListGroupItem className=\"d-flex justify-content-between align-items-center p-3\">\r\n                    <MDBIcon fab icon=\"twitter fa-lg\" style={{ color: '#55acee' }} />\r\n                    <MDBCardText>@mdbootstrap</MDBCardText>\r\n                  </MDBListGroupItem>\r\n                  <MDBListGroupItem className=\"d-flex justify-content-between align-items-center p-3\">\r\n                    <MDBIcon fab icon=\"instagram fa-lg\" style={{ color: '#ac2bac' }} />\r\n                    <MDBCardText>mdbootstrap</MDBCardText>\r\n                  </MDBListGroupItem>\r\n                  <MDBListGroupItem className=\"d-flex justify-content-between align-items-center p-3\">\r\n                    <MDBIcon fab icon=\"facebook fa-lg\" style={{ color: '#3b5998' }} />\r\n                    <MDBCardText>mdbootstrap</MDBCardText>\r\n                  </MDBListGroupItem>\r\n                </MDBListGroup>\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n          <MDBCol lg=\"8\">\r\n            <MDBCard className=\"mb-4\">\r\n              <MDBCardBody>\r\n                <MDBRow>\r\n                  <MDBCol sm=\"3\">\r\n                    <MDBCardText>Full Name</MDBCardText>\r\n                  </MDBCol>\r\n                  <MDBCol sm=\"9\">\r\n                    <MDBCardText className=\"text-muted\">{name}</MDBCardText>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n                <hr />\r\n                <MDBRow>\r\n                  <MDBCol sm=\"3\">\r\n                    <MDBCardText>Email</MDBCardText>\r\n                  </MDBCol>\r\n                  <MDBCol sm=\"9\">\r\n                    <MDBCardText className=\"text-muted\">{email}</MDBCardText>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n                <hr />\r\n                <MDBRow>\r\n                  <MDBCol sm=\"3\">\r\n                    <MDBCardText>Phone</MDBCardText>\r\n                  </MDBCol>\r\n                  <MDBCol sm=\"9\">\r\n                    <MDBCardText className=\"text-muted\">{phone}</MDBCardText>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n                <hr />\r\n                <MDBRow>\r\n                  <MDBCol sm=\"3\">\r\n                    <MDBCardText>Birthday</MDBCardText>\r\n                  </MDBCol>\r\n                  <MDBCol sm=\"9\">\r\n                    <MDBCardText className=\"text-muted\">{date}</MDBCardText>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n                <hr />\r\n                <MDBRow>\r\n                  <MDBCol sm=\"3\">\r\n                    <MDBCardText>Address</MDBCardText>\r\n                  </MDBCol>\r\n                  <MDBCol sm=\"9\">\r\n                    <MDBCardText className=\"text-muted\">{address}</MDBCardText>\r\n                  </MDBCol>\r\n                </MDBRow>\r\n                <hr />\r\n                {isSelf &&\r\n                  <MDBRow>\r\n                    <MDBCol sm=\"3\">\r\n                      <MDBCardText>Interests</MDBCardText>\r\n                    </MDBCol>\r\n                    <MDBCol sm=\"9\">\r\n                      <MDBCardText className=\"text-muted\" style={{ display: 'flex', alignItems: 'center' }}>\r\n                        {addInterests ?\r\n                          <TextField\r\n                            id=\"outlined-basic\"\r\n                            placeholder=\"Write your interests separated by commas\"\r\n                            value={user.interests}\r\n                            name=\"interests\"\r\n                            onChange={(e) => dispatch(setInterests(e.target.value))}\r\n                            variant=\"outlined\"\r\n                            sx={{ width: '60%' }}\r\n                          />\r\n                          : user.interests.length >= 1 ? user.interests.join(',') : null\r\n                        }\r\n                        <IconButton onClick={() => handleInterests()} >\r\n                          {addInterests ?\r\n                            <DoneIcon style={{ color: 'green' }} />\r\n                            : <AddIcon style={{ color: 'green' }} />\r\n                          }\r\n                        </IconButton>\r\n                      </MDBCardText>\r\n\r\n\r\n                    </MDBCol>\r\n                  </MDBRow>\r\n                }\r\n\r\n              </MDBCardBody>\r\n            </MDBCard>\r\n          </MDBCol>\r\n        </MDBRow>\r\n      </MDBContainer>\r\n    </section >\r\n  );\r\n}","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Friends.js",["203","204"],[],"import * as React from 'react';\r\nimport List from '@mui/material/List';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport api from \"../api/axios\";\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setUpdate } from '../features/feedSlice';\r\nimport { setAlertMsg } from '../features/authSlice';\r\nimport Friend from './Friend';\r\nimport { registerMessageHandler, unregisterMessageHandler, sendMessage } from '../api/socketManager';\r\n\r\n\r\nexport default function Friends({ removeFriend, navigate }) {\r\n    const userOb = useSelector((state) => state.auth?.userOb);\r\n    const userID = userOb._id;\r\n    const dispatch = useDispatch();\r\n    const [friends, setFriends] = useState()\r\n    const [refresh, setRefresh] = useState(false)\r\n    const update = useSelector((state) => state.feed?.update);\r\n\r\n    useEffect(() => {\r\n        api\r\n            .get(\"/getfriends\", {\r\n                params: {\r\n                    user: userID,\r\n                },\r\n            }).then((res) => {\r\n                const friends = res.data;\r\n                const friendsIds = friends?.map(friend => friend._id);\r\n                sendMessage('checkOnline', friendsIds, (response) => {\r\n                    const updatedFriends = friends?.map(friend => {\r\n                        if (response.includes(friend._id)) {\r\n                            return {\r\n                                ...friend,\r\n                                online: true\r\n                            };\r\n                        }\r\n                        return friend;\r\n                    });\r\n                    setFriends(updatedFriends);\r\n                    setRefresh(!refresh);\r\n                });\r\n\r\n            }).catch((err) => {\r\n                console.log(\"Error: \", err);\r\n            });\r\n\r\n        const handleConnect = (data) => {\r\n            const userId = data;\r\n            const updatedFriends = friends?.map(friend => {\r\n                if (friend._id === userId) {\r\n                    return {\r\n                        ...friend,\r\n                        online: true\r\n                    };\r\n                }\r\n                return friend;\r\n            });\r\n            setFriends(updatedFriends);\r\n            setRefresh(!refresh);\r\n            dispatch(setUpdate());\r\n        }\r\n\r\n        const handleDisconnect = (data) => {\r\n            const userId = data;\r\n            const updatedFriends = friends?.map(friend => {\r\n                if (friend._id === userId) {\r\n                    return {\r\n                        ...friend,\r\n                        online: false\r\n                    };\r\n                }\r\n                return friend;\r\n            });\r\n            setFriends(updatedFriends);\r\n            setRefresh(!refresh);\r\n            dispatch(setUpdate());\r\n        }\r\n\r\n        registerMessageHandler('online', handleConnect);\r\n        registerMessageHandler('offline', handleDisconnect);\r\n\r\n        return () => {\r\n            unregisterMessageHandler('online');\r\n            unregisterMessageHandler('offline');\r\n        }\r\n\r\n    }\r\n        , [update]);\r\n\r\n\r\n    return (\r\n        <List className='shadow-3' dense sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper', borderRadius: '20px', overflow: 'hidden' }}\r\n            subheader={<ListSubheader>Friends</ListSubheader>}>\r\n            {friends?.map((value) => {\r\n                return <Friend key={value._id} friend={value} navigate={navigate} removeFriend={removeFriend} />\r\n            })}\r\n        </List>\r\n    );\r\n}\r\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\app\\store.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\authSlice.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\registerSlice.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\loginSlice.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\feedSlice.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\api\\socketManager.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Friend.js",["205","206"],[],"import ListItem from '@mui/material/ListItem';\r\nimport FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport { IconButton } from '@mui/material';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport PersonRemoveIcon from '@mui/icons-material/PersonRemove';\r\nimport ChatIcon from '@mui/icons-material/Chat';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst Friend = ({ friend, removeFriend, navigate, suggested }) => {\r\n    const [anchorEls, setAnchorEls] = useState({});\r\n    const [isOnline, setIsOnline] = useState(false);\r\n    const [reason, setReason] = useState(null);\r\n    const handleClick = (event, id) => {\r\n        setAnchorEls(prev => ({ ...prev, [id]: event.currentTarget }));\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        if (suggested) {\r\n            setReason(friend.reason == \"interest\" ? \"You share common interests!\" : `You're both in ${friend.city}!`)\r\n            return;\r\n        }\r\n        if (friend?.online) {\r\n            setIsOnline(true);\r\n        } else {\r\n            setIsOnline(false);\r\n        }\r\n    }\r\n        , [friend.online]);\r\n\r\n    const handleClose = (id) => {\r\n        setAnchorEls(prev => ({ ...prev, [id]: null }));\r\n    };\r\n    return (\r\n        <ListItem\r\n            key={friend._id}\r\n            disablePadding\r\n\r\n        >\r\n            {!suggested ? (isOnline ? (\r\n                <FiberManualRecordIcon sx={{ marginLeft: 1, color: 'green' }} fontSize='small' />\r\n            ) :\r\n                <FiberManualRecordIcon sx={{ marginLeft: 1 }} fontSize='small' />\r\n            ) : null}\r\n\r\n            <ListItemButton onClick={() => navigate(`/profile/${friend._id}`)}>\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        alt={`Avatar n°${friend.name}`}\r\n                        src={`${friend.avatar}`}\r\n                    />\r\n                </ListItemAvatar>\r\n                <ListItemText id={friend.id} primary={`${friend.name}`} secondary={reason} />\r\n\r\n            </ListItemButton>\r\n            {!suggested ? (\r\n                <div>\r\n                    <IconButton aria-label=\"settings\" onClick={(event) => handleClick(event, friend._id)} >\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                    <Menu\r\n                        id=\"simple-menu\"\r\n                        anchorEl={anchorEls[friend._id]}\r\n                        open={Boolean(anchorEls[friend._id])}\r\n                        onClose={() => handleClose(friend._id)}\r\n                        style={{ borderRadius: '20px' }}\r\n                        sx={{\r\n                            '.MuiPaper-root': {\r\n                                borderRadius: '10px',\r\n                            },\r\n                        }}\r\n                    >\r\n                        <MenuItem onClick={() => {\r\n\r\n                            handleClose();\r\n                        }}>\r\n\r\n                            <ChatIcon style={{ color: 'blue', marginRight: 10 }} />Send Message</MenuItem>\r\n                        <Divider sx={{ my: 0.5 }} />\r\n                        <MenuItem onClick={(e) => {\r\n                            removeFriend(friend._id);\r\n                            handleClose(friend._id);\r\n\r\n\r\n                        }}\r\n                        ><PersonRemoveIcon style={{ color: 'red', marginRight: 10 }} />Remove Friend</MenuItem>\r\n                    </Menu>\r\n                </div>\r\n            ) : null}\r\n\r\n\r\n        </ListItem>\r\n    )\r\n\r\n};\r\nexport default Friend;","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\Chat.js",["207","208","209"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport FriendsChats from \"./FriendsChats\";\r\nimport ChatBox from \"./ChatBox\";\r\n\r\n\r\nconst Chat = () => {\r\n    return (\r\n        <div  style={{ display: 'flex', marginTop: \"20px\", width: \"100%\", height: \"100%\" }}>\r\n            <Grid container spacing={0}>\r\n                <Grid item xs={12} sm={4} md={2} style={{ height: \"100%\" }}>\r\n                    <FriendsChats />\r\n                </Grid>\r\n                <Grid item xs={12} sm={8} md={10} style={{ height: \"100%\" }}>\r\n                    <ChatBox />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\nexport default Chat;","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\FriendsChats.js",["210","211","212","213"],[],"import { useEffect, useState } from 'react'\r\nimport * as React from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport List from '@mui/material/List';\r\nimport Divider from '@mui/material/Divider';\r\nimport { registerMessageHandler, unregisterMessageHandler } from '../api/socketManager';\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\nimport ChatUnit from './ChatUnit';\r\n\r\n\r\n\r\nexport default function FriendsChats() {\r\n    const [selectedFriend, setSelectedFriend] = useState(null);\r\n    const user = useSelector((state) => state.auth?.userOb);\r\n    const friends = user.friends;\r\n    return (\r\n        <List className=\"friends-chats shadow-5\"\r\n            sx={{\r\n                width: '100%',\r\n                maxWidth: 360,\r\n                height: '100%',\r\n                bgcolor: 'background.paper',\r\n                borderRadius: '20px',\r\n                margin: 0,\r\n                padding: 0,\r\n\r\n            }}\r\n            subheader={<ListSubheader>Friends</ListSubheader>}\r\n        >\r\n            {friends?.map((friend) => {\r\n                return <ChatUnit key={friend._id} friend={friend} user={user} isSelected={selectedFriend === friend._id} onSelect={() => setSelectedFriend(friend._id)} />\r\n               \r\n            })}\r\n  \r\n        </List>\r\n\r\n    );\r\n\r\n}\r\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatBox.js",["214","215","216","217","218","219"],[],"import * as React from 'react';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useSelector } from 'react-redux'\r\nimport ChatMessage from './ChatMessage'\r\nimport ChatSendMessage from './ChatSendMessage'\r\nimport { useRef, useEffect } from 'react'\r\nimport { addMessage } from '../features/chatSlice';\r\nimport { registerMessageHandler, unregisterMessageHandler } from '../api/socketManager';\r\nimport { useDispatch } from 'react-redux'\r\nexport default function ChatBox() {\r\n    const dispatch = useDispatch();\r\n    const messagesEndRef = useRef(null);\r\n    const currentChat = useSelector((state) => state.chat.currentChat);\r\n    const currentChatContent = useSelector((state) => state.chat.currentChatContent);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const handleMessage = (data) => {\r\n            if(data.chatId === currentChat._id)\r\n            dispatch(addMessage(data.data));\r\n\r\n        };\r\n        registerMessageHandler('chatMsg', handleMessage);\r\n\r\n        return () => {\r\n            unregisterMessageHandler('chatMsg');\r\n        }\r\n\r\n    },);\r\n\r\n    useEffect(() => {\r\n\r\n        scrollToBottom()\r\n    }, [currentChatContent]);\r\n\r\n    return (\r\n        <div className=\"chat-box shadow-5\" style={{ borderRadius: '20px', overflow: 'hidden', margin: 0, padding: 0 }}>\r\n        <div style={{ maxHeight: 700, height: 700, overflowY: 'auto', scrollbarWidth: 'none', msOverflowStyle: 'none', backgroundColor: 'white', padding: 0, margin: 0 }}>\r\n            <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper', height: '100%', margin: 0, padding: 0 }}>\r\n                    {currentChat ? currentChatContent?.map((message) => (\r\n                        <ChatMessage key={message._id} message={message} />\r\n                    )) : null}\r\n                </List>\r\n                <div ref={messagesEndRef} />\r\n                <style>\r\n                    {`\r\n                        ::-webkit-scrollbar {\r\n                            display: none;\r\n                        }\r\n                    `}\r\n                </style>\r\n            </div>\r\n            <ChatSendMessage />\r\n        </div>\r\n    );\r\n    \r\n\r\n}\r\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\features\\chatSlice.js",[],[],"C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatMessage.js",["220","221","222","223"],[],"import * as React from 'react';\r\nimport {useState, useEffect} from 'react'\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport { useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nexport default function ChatMessage({ message }) {\r\n    const currentChat = useSelector((state) => state.chat.currentChat);\r\n    const navigate = useNavigate();\r\n    const user = currentChat.users.find(u => u._id === message.userId);\r\n\r\n    return (\r\n        <ListItem alignItems=\"flex-start\" >\r\n            <ListItemAvatar>\r\n                <Avatar alt={user?.name} src={user?.avatar} onClick={() => {navigate(`/profile/${user._id}`)}}/>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={user?.name}\r\n                secondary={\r\n                    <React.Fragment>\r\n                        <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            color=\"text.primary\"\r\n                        >\r\n                            {message.content}\r\n                        </Typography>\r\n                       \r\n                    </React.Fragment>\r\n                }\r\n            />\r\n        </ListItem>\r\n    );\r\n}\r\n\r\n","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatSendMessage.js",["224","225","226","227","228"],[],"import PostText from './PostText';\r\nimport * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setUpdate } from '../features/feedSlice';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport api from '../api/axios';\r\nimport PhotoIcon from '@mui/icons-material/Photo';\r\nimport { sendMessage } from '../api/socketManager'\r\nimport { addMessage, removeMessage } from '../features/chatSlice';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nconst ChatSendMessage = () => {\r\n    const dispatch = useDispatch();\r\n    const [text, setText] = useState(\"\");\r\n    const userOb = useSelector((state) => state.auth?.userOb);\r\n    const currentChat = useSelector((state) => state.chat.currentChat);\r\n\r\n    const handlePost = (text) => {\r\n        if (text === \"\") return;\r\n        setText(\"\");\r\n        const uniqueid = uuidv4();\r\n        dispatch(addMessage({ uniqueid: uniqueid, userId: userOb._id, content: text, created_at: new Date() }))\r\n        sendMessage('sendMessage', { chatId: currentChat._id, userId: userOb._id, content: text, created_at: new Date() }, (response) => {\r\n\r\n            if (!response.success) {\r\n                dispatch(removeMessage({ uniqueid: uniqueid, chatId: currentChat, userId: userOb, content: text, created_at: new Date() }))\r\n            }\r\n        }\r\n        )\r\n\r\n    }\r\n    const clickEnter = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handlePost(text)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card sx={{ backgroundColor: 'white' }}>\r\n            <CardContent>\r\n                <Stack spacing={1} direction=\"row\" sx={{ display: 'flex', width: '100%' }}>\r\n                    <Avatar aria-label=\"recipe\">\r\n                        <img src={userOb.avatar}></img>\r\n                    </Avatar>\r\n\r\n                    <PostText setText={setText} text={text} clickEnter={clickEnter} placeholder={\"Write you message here\"} />\r\n                    <Button disabled={currentChat ? false : true} variant=\"contained\" size=\"small\" sx={{ borderRadius: '20px' }} onClick={() => { handlePost(text); }}>Send</Button>\r\n\r\n                </Stack>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ChatSendMessage;","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\ChatUnit.js",["229","230","231","232","233","234","235"],[],"import ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { useEffect, useState } from 'react'\r\nimport { sendMessage } from '../api/socketManager'\r\nimport { setCurrentChat, setCurrentChatContent } from '../features/chatSlice';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\n\r\n\r\n\r\nconst ChatUnit = ({ user, friend, isSelected, onSelect }) => {\r\n    const dispatch = useDispatch()\r\n    const [userHasInteracted, setUserHasInteracted] = useState(false);\r\n    const [chatContent, setChatContent] = useState([])\r\n    const [chatId, setChatId] = useState(null)\r\n    const [chatUpdate, setChatUpdate] = useState(false)\r\n    const [loading, setLoading] = useState(true);\r\n    const [dataFetched, setDataFetched] = useState(false);\r\n    const [lastMessage, setLastMessage] = useState({\r\n        userId: null,\r\n        content: null,\r\n        created_at: null\r\n    })\r\n    const chatContentSelector = useSelector(state => state.chat.currentChatContent)\r\n    const currentChat = useSelector(state => state.chat.currentChat)\r\n    useEffect(() => {\r\n        dispatch(setCurrentChat(null));\r\n        sendMessage('checkChats', { userId: user._id, friendId: friend._id }, (response) => {\r\n            \r\n            if (response.data.users.some(user => user._id == friend._id))\r\n                if (response.success) {\r\n\r\n                    if (userHasInteracted)\r\n                        setChatId(response.data);\r\n\r\n                    if (response.data?.messages.length >= 1) {\r\n              \r\n                        const { userId, content, created_at } = response.data.messages[response.data.messages.length - 1];\r\n                        setChatContent(response.data.messages);\r\n                        setLastMessage({ userId, content, created_at });\r\n\r\n\r\n                    }\r\n                    setDataFetched(true);\r\n\r\n\r\n                }\r\n\r\n        });\r\n\r\n        setLoading(false);\r\n    }, [chatUpdate, userHasInteracted]);\r\n\r\n    useEffect(() => {\r\n        if (dataFetched && chatId) {\r\n            dispatch(setCurrentChat(chatId));\r\n            dispatch(setCurrentChatContent(chatContent));\r\n            setDataFetched(false);\r\n        }\r\n    }, [dataFetched, chatId, chatContent, dispatch]);\r\n    const handleClick = () => {\r\n        setUserHasInteracted(true);\r\n        setChatUpdate(prev => !prev);\r\n        onSelect();\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n\r\n        <ListItem key={friend._id} alignItems=\"flex-start\" onClick={() => handleClick()} style={{ backgroundColor: isSelected ? 'lightgray' : 'transparent', borderRadius: '10px' }} >\r\n\r\n            <ListItemAvatar >\r\n                <Avatar alt={friend.name} src={friend.avatar} />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={friend.name}\r\n                secondary={\r\n\r\n                    <>\r\n\r\n                        <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            color=\"text.primary\"\r\n                        >\r\n\r\n                            {lastMessage.userId === null ? \"\" : friend.name}\r\n                        </Typography>\r\n                        {lastMessage.userId === null ? \"Start a chat with \" + friend.name : \" : \" + lastMessage.content}\r\n\r\n                    </>\r\n\r\n                }\r\n            />\r\n\r\n        </ListItem>\r\n\r\n    )\r\n}\r\nexport default ChatUnit;","C:\\Users\\Naor\\Desktop\\code\\Summer Projects\\SocialPlace\\social\\src\\components\\SuggestedFriends.js",["236","237","238","239","240","241","242","243","244"],[],"import * as React from 'react';\r\nimport List from '@mui/material/List';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport api from \"../api/axios\";\r\nimport ListSubheader from '@mui/material/ListSubheader';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setUpdate } from '../features/feedSlice';\r\nimport { setAlertMsg } from '../features/authSlice';\r\nimport Friend from './Friend';\r\nimport { registerMessageHandler, unregisterMessageHandler, sendMessage } from '../api/socketManager';\r\n\r\n\r\nexport default function SuggestedFriends({ navigate }) {\r\n    const userOb = useSelector((state) => state.auth?.userOb);\r\n    const userID = userOb._id;\r\n    const dispatch = useDispatch();\r\n    const [friends, setFriends] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const update = useSelector((state) => state.feed?.update);\r\n\r\n    useEffect(() => {\r\n        api\r\n            .get(\"/getSuggestedFriends\", {\r\n                params: {\r\n                    user: userID,\r\n                },\r\n            }).then((res) => {\r\n                setFriends(res.data);\r\n            }).catch((err) => {\r\n                console.log(\"Error: \", err);\r\n            });\r\n\r\n    }\r\n        , [update]);\r\n\r\n    console.log(friends)\r\n    return (\r\n        <List className='shadow-3' dense sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper', borderRadius: '20px', overflow: 'hidden' }}\r\n            subheader={<ListSubheader>Suggested Friends</ListSubheader>}>\r\n                {friends?.map((friend) => {\r\n                    return <Friend key={friend._id} navigate={navigate} friend={friend} suggested={true} />\r\n                }\r\n                )}\r\n\r\n        </List>\r\n    );\r\n}\r\n",{"ruleId":"245","severity":1,"message":"246","line":5,"column":27,"nodeType":"247","messageId":"248","endLine":5,"endColumn":33},{"ruleId":"249","severity":1,"message":"250","line":38,"column":6,"nodeType":"251","endLine":38,"endColumn":14,"suggestions":"252"},{"ruleId":"245","severity":1,"message":"253","line":45,"column":10,"nodeType":"247","messageId":"248","endLine":45,"endColumn":25},{"ruleId":"254","severity":1,"message":"255","line":91,"column":5,"nodeType":"256","messageId":"257","endLine":110,"endColumn":6},{"ruleId":"245","severity":1,"message":"258","line":129,"column":9,"nodeType":"247","messageId":"248","endLine":129,"endColumn":27},{"ruleId":"245","severity":1,"message":"259","line":1,"column":21,"nodeType":"247","messageId":"248","endLine":1,"endColumn":29},{"ruleId":"245","severity":1,"message":"260","line":10,"column":10,"nodeType":"247","messageId":"248","endLine":10,"endColumn":21},{"ruleId":"249","severity":1,"message":"261","line":29,"column":8,"nodeType":"251","endLine":29,"endColumn":16,"suggestions":"262"},{"ruleId":"245","severity":1,"message":"263","line":35,"column":19,"nodeType":"247","messageId":"248","endLine":35,"endColumn":24},{"ruleId":"264","severity":1,"message":"265","line":156,"column":25,"nodeType":"266","endLine":156,"endColumn":43},{"ruleId":"245","severity":1,"message":"267","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":11},{"ruleId":"245","severity":1,"message":"268","line":13,"column":8,"nodeType":"247","messageId":"248","endLine":13,"endColumn":17},{"ruleId":"264","severity":1,"message":"265","line":48,"column":9,"nodeType":"266","endLine":48,"endColumn":34},{"ruleId":"264","severity":1,"message":"265","line":96,"column":29,"nodeType":"266","endLine":96,"endColumn":47},{"ruleId":"245","severity":1,"message":"269","line":16,"column":8,"nodeType":"247","messageId":"248","endLine":16,"endColumn":10},{"ruleId":"245","severity":1,"message":"270","line":19,"column":28,"nodeType":"247","messageId":"248","endLine":19,"endColumn":44},{"ruleId":"245","severity":1,"message":"260","line":36,"column":34,"nodeType":"247","messageId":"248","endLine":36,"endColumn":45},{"ruleId":"245","severity":1,"message":"271","line":37,"column":10,"nodeType":"247","messageId":"248","endLine":37,"endColumn":19},{"ruleId":"272","severity":1,"message":"273","line":134,"column":29,"nodeType":"274","messageId":"275","endLine":134,"endColumn":31},{"ruleId":"272","severity":1,"message":"273","line":135,"column":22,"nodeType":"274","messageId":"275","endLine":135,"endColumn":24},{"ruleId":"272","severity":1,"message":"273","line":135,"column":45,"nodeType":"274","messageId":"275","endLine":135,"endColumn":47},{"ruleId":"276","severity":1,"message":"277","line":258,"column":17,"nodeType":"266","endLine":264,"endColumn":18},{"ruleId":"245","severity":1,"message":"278","line":13,"column":3,"nodeType":"247","messageId":"248","endLine":13,"endColumn":14},{"ruleId":"245","severity":1,"message":"279","line":14,"column":3,"nodeType":"247","messageId":"248","endLine":14,"endColumn":17},{"ruleId":"245","severity":1,"message":"280","line":36,"column":10,"nodeType":"247","messageId":"248","endLine":36,"endColumn":14},{"ruleId":"245","severity":1,"message":"281","line":38,"column":10,"nodeType":"247","messageId":"248","endLine":38,"endColumn":22},{"ruleId":"245","severity":1,"message":"282","line":38,"column":24,"nodeType":"247","messageId":"248","endLine":38,"endColumn":39},{"ruleId":"249","severity":1,"message":"283","line":72,"column":6,"nodeType":"251","endLine":72,"endColumn":20,"suggestions":"284"},{"ruleId":"245","severity":1,"message":"285","line":103,"column":50,"nodeType":"247","messageId":"248","endLine":103,"endColumn":59},{"ruleId":"272","severity":1,"message":"273","line":208,"column":50,"nodeType":"274","messageId":"275","endLine":208,"endColumn":52},{"ruleId":"272","severity":1,"message":"273","line":212,"column":46,"nodeType":"274","messageId":"275","endLine":212,"endColumn":48},{"ruleId":"245","severity":1,"message":"260","line":10,"column":10,"nodeType":"247","messageId":"248","endLine":10,"endColumn":21},{"ruleId":"249","severity":1,"message":"286","line":91,"column":11,"nodeType":"251","endLine":91,"endColumn":19,"suggestions":"287"},{"ruleId":"272","severity":1,"message":"273","line":27,"column":37,"nodeType":"274","messageId":"275","endLine":27,"endColumn":39},{"ruleId":"249","severity":1,"message":"288","line":36,"column":11,"nodeType":"251","endLine":36,"endColumn":26,"suggestions":"289"},{"ruleId":"245","severity":1,"message":"259","line":1,"column":17,"nodeType":"247","messageId":"248","endLine":1,"endColumn":25},{"ruleId":"245","severity":1,"message":"290","line":1,"column":27,"nodeType":"247","messageId":"248","endLine":1,"endColumn":36},{"ruleId":"245","severity":1,"message":"291","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":13},{"ruleId":"245","severity":1,"message":"290","line":1,"column":10,"nodeType":"247","messageId":"248","endLine":1,"endColumn":19},{"ruleId":"245","severity":1,"message":"292","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":15},{"ruleId":"245","severity":1,"message":"293","line":6,"column":10,"nodeType":"247","messageId":"248","endLine":6,"endColumn":32},{"ruleId":"245","severity":1,"message":"294","line":6,"column":34,"nodeType":"247","messageId":"248","endLine":6,"endColumn":58},{"ruleId":"245","severity":1,"message":"295","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":16},{"ruleId":"245","severity":1,"message":"292","line":4,"column":8,"nodeType":"247","messageId":"248","endLine":4,"endColumn":15},{"ruleId":"245","severity":1,"message":"296","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":20},{"ruleId":"245","severity":1,"message":"297","line":6,"column":8,"nodeType":"247","messageId":"248","endLine":6,"endColumn":22},{"ruleId":"245","severity":1,"message":"298","line":7,"column":8,"nodeType":"247","messageId":"248","endLine":7,"endColumn":14},{"ruleId":"245","severity":1,"message":"299","line":8,"column":8,"nodeType":"247","messageId":"248","endLine":8,"endColumn":18},{"ruleId":"245","severity":1,"message":"259","line":2,"column":9,"nodeType":"247","messageId":"248","endLine":2,"endColumn":17},{"ruleId":"245","severity":1,"message":"290","line":2,"column":19,"nodeType":"247","messageId":"248","endLine":2,"endColumn":28},{"ruleId":"245","severity":1,"message":"300","line":3,"column":8,"nodeType":"247","messageId":"248","endLine":3,"endColumn":12},{"ruleId":"245","severity":1,"message":"292","line":5,"column":8,"nodeType":"247","messageId":"248","endLine":5,"endColumn":15},{"ruleId":"245","severity":1,"message":"271","line":7,"column":10,"nodeType":"247","messageId":"248","endLine":7,"endColumn":19},{"ruleId":"245","severity":1,"message":"267","line":9,"column":8,"nodeType":"247","messageId":"248","endLine":9,"endColumn":11},{"ruleId":"245","severity":1,"message":"301","line":12,"column":8,"nodeType":"247","messageId":"248","endLine":12,"endColumn":11},{"ruleId":"245","severity":1,"message":"268","line":13,"column":8,"nodeType":"247","messageId":"248","endLine":13,"endColumn":17},{"ruleId":"264","severity":1,"message":"265","line":51,"column":25,"nodeType":"266","endLine":51,"endColumn":50},{"ruleId":"245","severity":1,"message":"292","line":10,"column":8,"nodeType":"247","messageId":"248","endLine":10,"endColumn":15},{"ruleId":"245","severity":1,"message":"302","line":11,"column":8,"nodeType":"247","messageId":"248","endLine":11,"endColumn":22},{"ruleId":"245","severity":1,"message":"303","line":21,"column":12,"nodeType":"247","messageId":"248","endLine":21,"endColumn":19},{"ruleId":"245","severity":1,"message":"304","line":28,"column":11,"nodeType":"247","messageId":"248","endLine":28,"endColumn":30},{"ruleId":"245","severity":1,"message":"305","line":29,"column":11,"nodeType":"247","messageId":"248","endLine":29,"endColumn":22},{"ruleId":"272","severity":1,"message":"273","line":34,"column":59,"nodeType":"274","messageId":"275","endLine":34,"endColumn":61},{"ruleId":"249","severity":1,"message":"306","line":56,"column":8,"nodeType":"251","endLine":56,"endColumn":39,"suggestions":"307"},{"ruleId":"245","severity":1,"message":"271","line":9,"column":10,"nodeType":"247","messageId":"248","endLine":9,"endColumn":19},{"ruleId":"245","severity":1,"message":"260","line":10,"column":10,"nodeType":"247","messageId":"248","endLine":10,"endColumn":21},{"ruleId":"245","severity":1,"message":"293","line":12,"column":10,"nodeType":"247","messageId":"248","endLine":12,"endColumn":32},{"ruleId":"245","severity":1,"message":"294","line":12,"column":34,"nodeType":"247","messageId":"248","endLine":12,"endColumn":58},{"ruleId":"245","severity":1,"message":"308","line":12,"column":60,"nodeType":"247","messageId":"248","endLine":12,"endColumn":71},{"ruleId":"245","severity":1,"message":"309","line":18,"column":11,"nodeType":"247","messageId":"248","endLine":18,"endColumn":19},{"ruleId":"245","severity":1,"message":"310","line":20,"column":12,"nodeType":"247","messageId":"248","endLine":20,"endColumn":19},{"ruleId":"245","severity":1,"message":"311","line":20,"column":21,"nodeType":"247","messageId":"248","endLine":20,"endColumn":31},{"ruleId":"249","severity":1,"message":"312","line":36,"column":11,"nodeType":"251","endLine":36,"endColumn":19,"suggestions":"313"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'isLoggedIn', 'navigate', and 'userOb._id'. Either include them or remove the dependency array.","ArrayExpression",["314"],"'anchorElNotUser' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'handleCloseUserNot' is assigned a value but never used.","'useState' is defined but never used.","'setAlertMsg' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'userID'. Either include them or remove the dependency array.",["315"],"'email' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Box' is defined but never used.","'PhotoIcon' is defined but never used.","'io' is defined but never used.","'disconnectSocket' is defined but never used.","'setUpdate' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'MDBProgress' is defined but never used.","'MDBProgressBar' is defined but never used.","'sent' is assigned a value but never used.","'tmpInterests' is assigned a value but never used.","'setTmpInterests' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'changeAlert'. Either include it or remove the dependency array. If 'changeAlert' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["316"],"'interests' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'friends', 'refresh', and 'userID'. Either include them or remove the dependency array. You can also do a functional update 'setRefresh(r => ...)' if you only need 'refresh' in the 'setRefresh' call.",["317"],"React Hook useEffect has missing dependencies: 'friend.city', 'friend.reason', and 'suggested'. Either include them or remove the dependency array. If 'setReason' needs the current value of 'friend.reason', you can also switch to useReducer instead of useState and read 'friend.reason' in the reducer.",["318"],"'useEffect' is defined but never used.","'Stack' is defined but never used.","'Divider' is defined but never used.","'registerMessageHandler' is defined but never used.","'unregisterMessageHandler' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'Typography' is defined but never used.","'List' is defined but never used.","'api' is defined but never used.","'ListItemButton' is defined but never used.","'loading' is assigned a value but never used.","'chatContentSelector' is assigned a value but never used.","'currentChat' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'friend._id', and 'user._id'. Either include them or remove the dependency array.",["319"],"'sendMessage' is defined but never used.","'dispatch' is assigned a value but never used.","'refresh' is assigned a value but never used.","'setRefresh' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.",["320"],{"desc":"321","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"327","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},"Update the dependencies array to be: [dispatch, isLoggedIn, navigate, update, userOb._id]",{"range":"335","text":"336"},"Update the dependencies array to be: [dispatch, update, userID]",{"range":"337","text":"338"},"Update the dependencies array to be: [userId, user, changeAlert]",{"range":"339","text":"340"},"Update the dependencies array to be: [dispatch, friends, refresh, update, userID]",{"range":"341","text":"342"},"Update the dependencies array to be: [friend.city, friend?.online, friend.reason, suggested]",{"range":"343","text":"344"},"Update the dependencies array to be: [chatUpdate, dispatch, friend._id, user._id, userHasInteracted]",{"range":"345","text":"346"},"Update the dependencies array to be: [update, userID]",{"range":"347","text":"348"},[1373,1381],"[dispatch, isLoggedIn, navigate, update, userOb._id]",[1108,1116],"[dispatch, update, userID]",[2119,2133],"[userId, user, changeAlert]",[3132,3140],"[dispatch, friends, refresh, update, userID]",[1439,1454],"[friend.city, friend?.online, friend.reason, suggested]",[2215,2246],"[chatUpdate, dispatch, friend._id, user._id, userHasInteracted]",[1220,1228],"[update, userID]"]