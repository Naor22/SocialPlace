{"ast":null,"code":"import io from 'socket.io-client';\nlet socket;\nexport const initializeSocket = userId => {\n  if (!socket) {\n    socket = io('http://localhost:3001', {\n      query: {\n        userId: userId\n      },\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n  }\n};\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\nexport const sendMessage = (messageType, data, callback, customMessageId) => {\n  if (!socket) return;\n  const messageId = customMessageId || uuidv4(); // Use customMessageId or generate a new one\n\n  socket.emit(messageType, {\n    ...data,\n    messageId\n  });\n  if (callback) {\n    socket.once(`${messageType}-response-${messageId}`, callback);\n  }\n};\nexport const registerMessageHandler = (messageType, handler) => {\n  if (!socket) return;\n  socket.on(messageType, handler);\n};\nexport const unregisterMessageHandler = messageType => {\n  if (!socket) return;\n  socket.off(messageType);\n};","map":{"version":3,"names":["io","socket","initializeSocket","userId","query","reconnection","reconnectionAttempts","reconnectionDelay","disconnectSocket","disconnect","sendMessage","messageType","data","callback","customMessageId","messageId","uuidv4","emit","once","registerMessageHandler","handler","on","unregisterMessageHandler","off"],"sources":["C:/Users/Naor/Desktop/code/Summer Projects/SocialPlace/social/src/api/socketManager.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nexport const initializeSocket = (userId) => {\r\n  if (!socket) {\r\n    socket = io('http://localhost:3001', {\r\n      query: {\r\n        userId: userId,\r\n      },\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n  }\r\n}\r\n\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n}\r\n\r\nexport const sendMessage = (messageType, data, callback, customMessageId) => {\r\n  if (!socket) return;\r\n\r\n  const messageId = customMessageId || uuidv4(); // Use customMessageId or generate a new one\r\n  \r\n  socket.emit(messageType, { ...data, messageId });\r\n\r\n  if (callback) {\r\n    socket.once(`${messageType}-response-${messageId}`, callback);\r\n  }\r\n}\r\n\r\n\r\nexport const registerMessageHandler = (messageType, handler) => {\r\n  if (!socket) return;\r\n\r\n  socket.on(messageType, handler);\r\n}\r\n\r\nexport const unregisterMessageHandler = (messageType) => {\r\n  if (!socket) return;\r\n  socket.off(messageType);\r\n}\r\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,kBAAkB;AAEjC,IAAIC,MAAM;AAEV,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;EAC1C,IAAI,CAACF,MAAM,EAAE;IACXA,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;MACnCI,KAAK,EAAE;QACLD,MAAM,EAAEA;MACV,CAAC;MACDE,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIP,MAAM,EAAE;IACVA,MAAM,CAACQ,UAAU,CAAC,CAAC;IACnBR,MAAM,GAAG,IAAI;EACf;AACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAGA,CAACC,WAAW,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,eAAe,KAAK;EAC3E,IAAI,CAACb,MAAM,EAAE;EAEb,MAAMc,SAAS,GAAGD,eAAe,IAAIE,MAAM,CAAC,CAAC,CAAC,CAAC;;EAE/Cf,MAAM,CAACgB,IAAI,CAACN,WAAW,EAAE;IAAE,GAAGC,IAAI;IAAEG;EAAU,CAAC,CAAC;EAEhD,IAAIF,QAAQ,EAAE;IACZZ,MAAM,CAACiB,IAAI,CAAE,GAAEP,WAAY,aAAYI,SAAU,EAAC,EAAEF,QAAQ,CAAC;EAC/D;AACF,CAAC;AAGD,OAAO,MAAMM,sBAAsB,GAAGA,CAACR,WAAW,EAAES,OAAO,KAAK;EAC9D,IAAI,CAACnB,MAAM,EAAE;EAEbA,MAAM,CAACoB,EAAE,CAACV,WAAW,EAAES,OAAO,CAAC;AACjC,CAAC;AAED,OAAO,MAAME,wBAAwB,GAAIX,WAAW,IAAK;EACvD,IAAI,CAACV,MAAM,EAAE;EACbA,MAAM,CAACsB,GAAG,CAACZ,WAAW,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}