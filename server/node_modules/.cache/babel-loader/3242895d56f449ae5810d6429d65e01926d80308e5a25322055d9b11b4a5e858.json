{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naor\\\\Desktop\\\\code\\\\Summer Projects\\\\SocialPlace\\\\social\\\\src\\\\components\\\\ChatUnit.js\",\n  _s = $RefreshSig$();\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport ListItem from '@mui/material/ListItem';\nimport { useEffect, useState, useRef } from 'react';\nimport { sendMessage } from '../api/socketManager';\nimport { setCurrentChat, setCurrentChatContent } from '../features/chatSlice';\nimport { useDispatch } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatUnit = ({\n  user,\n  friend\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [userHasInteracted, setUserHasInteracted] = useState(false);\n  const [chatContent, setChatContent] = useState([]);\n  const [chatId, setChatId] = useState(null);\n  const [chatUpdate, setChatUpdate] = useState(false);\n  const [dataFetched, setDataFetched] = useState(false);\n  const [lastMessage, setLastMessage] = useState({\n    userId: null,\n    content: null,\n    created_at: null\n  });\n  useEffect(() => {\n    if (userHasInteracted) {\n      sendMessage('checkChats', {\n        userId: user._id,\n        friendId: friend._id\n      }, response => {\n        if (response.success) {\n          setChatId(response.data._id);\n          if (response.data.messages.length >= 1) {\n            const {\n              userId,\n              content,\n              created_at\n            } = response.data.messages[response.data.messages.length - 1];\n            setChatContent(response.data.messages);\n            setLastMessage({\n              userId,\n              content,\n              created_at\n            });\n          }\n          setDataFetched(true); // Only set this to true after message has been sent and data processed\n        }\n      });\n    }\n  }, [chatUpdate, userHasInteracted]);\n  useEffect(() => {\n    if (dataFetched) {\n      dispatch(setCurrentChat(chatId));\n      dispatch(setCurrentChatContent(chatContent));\n      setDataFetched(false);\n    }\n  }, [dataFetched, chatId, chatContent, dispatch]);\n  const handleClick = () => {\n    setUserHasInteracted(true);\n    setChatUpdate(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(ListItem, {\n    alignItems: \"flex-start\",\n    onClick: () => handleClick(),\n    children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n      children: /*#__PURE__*/_jsxDEV(Avatar, {\n        alt: friend.name,\n        src: friend.avatar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n      primary: friend.name,\n      secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          sx: {\n            display: 'inline'\n          },\n          component: \"span\",\n          variant: \"body2\",\n          color: \"text.primary\",\n          children: lastMessage.userId === null ? \"\" : lastMessage.userId.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this), lastMessage.userId === null ? \"Start your first chat with \" + friend.name : \" : \" + lastMessage.content]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, friend._id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatUnit, \"CK+Mvt+FmteZXOhf+DhFkSNbuPc=\", false, function () {\n  return [useDispatch];\n});\n_c = ChatUnit;\nexport default ChatUnit;\nvar _c;\n$RefreshReg$(_c, \"ChatUnit\");","map":{"version":3,"names":["ListItemText","ListItemAvatar","Avatar","Typography","ListItem","useEffect","useState","useRef","sendMessage","setCurrentChat","setCurrentChatContent","useDispatch","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatUnit","user","friend","_s","dispatch","userHasInteracted","setUserHasInteracted","chatContent","setChatContent","chatId","setChatId","chatUpdate","setChatUpdate","dataFetched","setDataFetched","lastMessage","setLastMessage","userId","content","created_at","_id","friendId","response","success","data","messages","length","handleClick","prev","alignItems","onClick","children","alt","name","src","avatar","fileName","_jsxFileName","lineNumber","columnNumber","primary","secondary","sx","display","component","variant","color","_c","$RefreshReg$"],"sources":["C:/Users/Naor/Desktop/code/Summer Projects/SocialPlace/social/src/components/ChatUnit.js"],"sourcesContent":["import ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { useEffect, useState, useRef } from 'react'\r\nimport { sendMessage } from '../api/socketManager'\r\nimport { setCurrentChat, setCurrentChatContent } from '../features/chatSlice';\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nconst ChatUnit = ({ user, friend }) => {\r\n    const dispatch = useDispatch()\r\n    const [userHasInteracted, setUserHasInteracted] = useState(false);\r\n    const [chatContent, setChatContent] = useState([])\r\n    const [chatId, setChatId] = useState(null)\r\n    const [chatUpdate, setChatUpdate] = useState(false)\r\n    const [dataFetched, setDataFetched] = useState(false);\r\n    const [lastMessage, setLastMessage] = useState({\r\n        userId: null,\r\n        content: null,\r\n        created_at: null\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (userHasInteracted) {\r\n            sendMessage('checkChats', { userId: user._id, friendId: friend._id }, (response) => {\r\n                if (response.success) {\r\n                    setChatId(response.data._id);\r\n                    if (response.data.messages.length >= 1) {\r\n                        const { userId, content, created_at } = response.data.messages[response.data.messages.length - 1];\r\n                        setChatContent(response.data.messages);\r\n                        setLastMessage({ userId, content, created_at });\r\n                    }\r\n                    setDataFetched(true); // Only set this to true after message has been sent and data processed\r\n                }\r\n            });\r\n        }\r\n    }, [chatUpdate, userHasInteracted]);\r\n\r\n    useEffect(() => {\r\n        if (dataFetched) {\r\n            dispatch(setCurrentChat(chatId));\r\n            dispatch(setCurrentChatContent(chatContent));\r\n            setDataFetched(false); \r\n        }\r\n    }, [dataFetched, chatId, chatContent, dispatch]);\r\n    const handleClick = () => {\r\n        setUserHasInteracted(true);\r\n        setChatUpdate(prev => !prev);\r\n    };\r\n\r\n    return (\r\n        <ListItem key={friend._id} alignItems=\"flex-start\" onClick={() => handleClick()} >\r\n            <ListItemAvatar>\r\n                <Avatar alt={friend.name} src={friend.avatar} />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={friend.name}\r\n                secondary={\r\n                    <>\r\n                        <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            color=\"text.primary\"\r\n                        >\r\n                            {lastMessage.userId === null ? \"\" : lastMessage.userId.name}\r\n                        </Typography>\r\n                        {lastMessage.userId === null ? \"Start your first chat with \" + friend.name : \" : \" + lastMessage.content}\r\n                    </>\r\n                }\r\n            />\r\n        </ListItem>\r\n    )\r\n}\r\nexport default ChatUnit;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}