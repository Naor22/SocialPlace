{"ast":null,"code":"import io from 'socket.io-client';\nlet socket;\nexport const initializeSocket = userId => {\n  if (!socket) {\n    socket = io('http://localhost:3001', {\n      query: {\n        userId: userId\n      },\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000\n    });\n  }\n};\nexport const disconnectSocket = () => {\n  if (socket) {\n    socket.disconnect();\n    socket = null;\n  }\n};\nexport const sendMessage = (messageType, data, callback) => {\n  if (!socket) return;\n\n  // Emit the message to the server\n  socket.emit(messageType, data);\n\n  // If a callback is provided, listen for the response from the server\n  if (callback) {\n    socket.once(`${messageType}-response`, callback);\n  }\n};\nexport const registerMessageHandler = (messageType, handler) => {\n  if (!socket) return;\n  socket.on(messageType, handler);\n};\nexport const unregisterMessageHandler = messageType => {\n  if (!socket) return;\n  socket.off(messageType);\n};","map":{"version":3,"names":["io","socket","initializeSocket","userId","query","reconnection","reconnectionAttempts","reconnectionDelay","disconnectSocket","disconnect","sendMessage","messageType","data","callback","emit","once","registerMessageHandler","handler","on","unregisterMessageHandler","off"],"sources":["C:/Users/Naor/Desktop/code/Summer Projects/SocialPlace/social/src/api/socketManager.js"],"sourcesContent":["import io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nexport const initializeSocket = (userId) => {\r\n  if (!socket) {\r\n    socket = io('http://localhost:3001', {\r\n      query: {\r\n        userId: userId,\r\n      },\r\n      reconnection: true,\r\n      reconnectionAttempts: 5,\r\n      reconnectionDelay: 1000,\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport const disconnectSocket = () => {\r\n  if (socket) {\r\n    socket.disconnect();\r\n    socket = null;\r\n  }\r\n}\r\n\r\nexport const sendMessage = (messageType, data, callback) => {\r\n  if (!socket) return;\r\n\r\n  // Emit the message to the server\r\n  socket.emit(messageType, data);\r\n\r\n  // If a callback is provided, listen for the response from the server\r\n  if (callback) {\r\n    socket.once(`${messageType}-response`, callback);\r\n  }\r\n}\r\n\r\n\r\n\r\nexport const registerMessageHandler = (messageType, handler) => {\r\n  if (!socket) return;\r\n\r\n  socket.on(messageType, handler);\r\n}\r\n\r\nexport const unregisterMessageHandler = (messageType) => {\r\n  if (!socket) return;\r\n  socket.off(messageType);\r\n}\r\n"],"mappings":"AAAA,OAAOA,EAAE,MAAM,kBAAkB;AAEjC,IAAIC,MAAM;AAEV,OAAO,MAAMC,gBAAgB,GAAIC,MAAM,IAAK;EAC1C,IAAI,CAACF,MAAM,EAAE;IACXA,MAAM,GAAGD,EAAE,CAAC,uBAAuB,EAAE;MACnCI,KAAK,EAAE;QACLD,MAAM,EAAEA;MACV,CAAC;MACDE,YAAY,EAAE,IAAI;MAClBC,oBAAoB,EAAE,CAAC;MACvBC,iBAAiB,EAAE;IACrB,CAAC,CAAC;EACJ;AACF,CAAC;AAGD,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,IAAIP,MAAM,EAAE;IACVA,MAAM,CAACQ,UAAU,CAAC,CAAC;IACnBR,MAAM,GAAG,IAAI;EACf;AACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAGA,CAACC,WAAW,EAAEC,IAAI,EAAEC,QAAQ,KAAK;EAC1D,IAAI,CAACZ,MAAM,EAAE;;EAEb;EACAA,MAAM,CAACa,IAAI,CAACH,WAAW,EAAEC,IAAI,CAAC;;EAE9B;EACA,IAAIC,QAAQ,EAAE;IACZZ,MAAM,CAACc,IAAI,CAAE,GAAEJ,WAAY,WAAU,EAAEE,QAAQ,CAAC;EAClD;AACF,CAAC;AAID,OAAO,MAAMG,sBAAsB,GAAGA,CAACL,WAAW,EAAEM,OAAO,KAAK;EAC9D,IAAI,CAAChB,MAAM,EAAE;EAEbA,MAAM,CAACiB,EAAE,CAACP,WAAW,EAAEM,OAAO,CAAC;AACjC,CAAC;AAED,OAAO,MAAME,wBAAwB,GAAIR,WAAW,IAAK;EACvD,IAAI,CAACV,MAAM,EAAE;EACbA,MAAM,CAACmB,GAAG,CAACT,WAAW,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}