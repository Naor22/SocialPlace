{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Naor\\\\Desktop\\\\code\\\\Summer Projects\\\\SocialPlace\\\\social\\\\src\\\\components\\\\ChatUnit.js\",\n  _s = $RefreshSig$();\nimport ListItemText from '@mui/material/ListItemText';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport Typography from '@mui/material/Typography';\nimport ListItem from '@mui/material/ListItem';\nimport { useEffect, useState } from 'react';\nimport { sendMessage } from '../api/socketManager';\nimport { setCurrentChat, setCurrentChatContent } from '../features/chatSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Divider from '@mui/material/Divider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatUnit = ({\n  user,\n  friend,\n  isSelected,\n  onSelect\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  const [userHasInteracted, setUserHasInteracted] = useState(false);\n  const [chatContent, setChatContent] = useState([]);\n  const [chatId, setChatId] = useState(null);\n  const [chatUpdate, setChatUpdate] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [dataFetched, setDataFetched] = useState(false);\n  const [lastMessage, setLastMessage] = useState({\n    userId: null,\n    content: null,\n    created_at: null\n  });\n  const chatContentSelector = useSelector(state => state.chat.currentChatContent);\n  const currentChat = useSelector(state => state.chat.currentChat);\n  useEffect(() => {\n    sendMessage('checkChats', {\n      userId: user._id,\n      friendId: friend._id\n    }, response => {\n      if (response.data.users.some(user => user._id == friend._id)) if (response.success) {\n        var _response$data;\n        if (userHasInteracted) setChatId(response.data);\n        if (((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.messages.length) >= 1) {\n          console.log(friend.name);\n          const {\n            userId,\n            content,\n            created_at\n          } = response.data.messages[response.data.messages.length - 1];\n          setChatContent(response.data.messages);\n          setLastMessage({\n            userId,\n            content,\n            created_at\n          });\n        }\n        setDataFetched(true);\n      }\n    });\n    setLoading(false);\n  }, [chatUpdate, userHasInteracted]);\n  useEffect(() => {\n    if (dataFetched && chatId) {\n      dispatch(setCurrentChat(chatId));\n      dispatch(setCurrentChatContent(chatContent));\n      setDataFetched(false);\n    }\n  }, [dataFetched, chatId, chatContent, dispatch]);\n  const handleClick = () => {\n    setUserHasInteracted(true);\n    setChatUpdate(prev => !prev);\n    onSelect();\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Divider, {\n      variant: \"inset\",\n      component: \"li\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n      alignItems: \"flex-start\",\n      onClick: () => handleClick(),\n      style: {\n        backgroundColor: isSelected ? 'lightgray' : 'transparent',\n        borderRadius: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n        children: /*#__PURE__*/_jsxDEV(Avatar, {\n          alt: friend.name,\n          src: friend.avatar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: friend.name,\n        secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            sx: {\n              display: 'inline'\n            },\n            component: \"span\",\n            variant: \"body2\",\n            color: \"text.primary\",\n            children: lastMessage.userId === null ? \"\" : friend.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }, this), lastMessage.userId === null ? \"Start a chat with \" + friend.name : \" : \" + lastMessage.content]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)]\n    }, friend._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ChatUnit, \"CMsDPQBl4PzNJsWV7vSWvkmfGTw=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = ChatUnit;\nexport default ChatUnit;\nvar _c;\n$RefreshReg$(_c, \"ChatUnit\");","map":{"version":3,"names":["ListItemText","ListItemAvatar","Avatar","Typography","ListItem","useEffect","useState","sendMessage","setCurrentChat","setCurrentChatContent","useDispatch","useSelector","Divider","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatUnit","user","friend","isSelected","onSelect","_s","dispatch","userHasInteracted","setUserHasInteracted","chatContent","setChatContent","chatId","setChatId","chatUpdate","setChatUpdate","loading","setLoading","dataFetched","setDataFetched","lastMessage","setLastMessage","userId","content","created_at","chatContentSelector","state","chat","currentChatContent","currentChat","_id","friendId","response","data","users","some","success","_response$data","messages","length","console","log","name","handleClick","prev","children","variant","component","fileName","_jsxFileName","lineNumber","columnNumber","alignItems","onClick","style","backgroundColor","borderRadius","alt","src","avatar","primary","secondary","sx","display","color","_c","$RefreshReg$"],"sources":["C:/Users/Naor/Desktop/code/Summer Projects/SocialPlace/social/src/components/ChatUnit.js"],"sourcesContent":["import ListItemText from '@mui/material/ListItemText';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport { useEffect, useState } from 'react'\r\nimport { sendMessage } from '../api/socketManager'\r\nimport { setCurrentChat, setCurrentChatContent } from '../features/chatSlice';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Divider from '@mui/material/Divider';\r\n\r\n\r\n\r\nconst ChatUnit = ({ user, friend, isSelected, onSelect }) => {\r\n    const dispatch = useDispatch()\r\n    const [userHasInteracted, setUserHasInteracted] = useState(false);\r\n    const [chatContent, setChatContent] = useState([])\r\n    const [chatId, setChatId] = useState(null)\r\n    const [chatUpdate, setChatUpdate] = useState(false)\r\n    const [loading, setLoading] = useState(true);\r\n    const [dataFetched, setDataFetched] = useState(false);\r\n    const [lastMessage, setLastMessage] = useState({\r\n        userId: null,\r\n        content: null,\r\n        created_at: null\r\n    })\r\n    const chatContentSelector = useSelector(state => state.chat.currentChatContent)\r\n    const currentChat = useSelector(state => state.chat.currentChat)\r\n    useEffect(() => {\r\n\r\n        sendMessage('checkChats', { userId: user._id, friendId: friend._id }, (response) => {\r\n            if(response.data.users.some(user => user._id == friend._id))\r\n            if (response.success) {\r\n                \r\n                if (userHasInteracted)\r\n                    setChatId(response.data);\r\n\r\n                if (response.data?.messages.length >= 1) {\r\n                    console.log(friend.name)\r\n                    const { userId, content, created_at } = response.data.messages[response.data.messages.length - 1];\r\n                    setChatContent(response.data.messages);\r\n                    setLastMessage({ userId, content, created_at });\r\n\r\n\r\n                }\r\n                setDataFetched(true);\r\n\r\n\r\n            }\r\n\r\n        });\r\n\r\n        setLoading(false);\r\n    }, [chatUpdate, userHasInteracted]);\r\n\r\n    useEffect(() => {\r\n        if (dataFetched && chatId) {\r\n            dispatch(setCurrentChat(chatId));\r\n            dispatch(setCurrentChatContent(chatContent));\r\n            setDataFetched(false);\r\n        }\r\n    }, [dataFetched, chatId, chatContent, dispatch]);\r\n    const handleClick = () => {\r\n        setUserHasInteracted(true);\r\n        setChatUpdate(prev => !prev);\r\n        onSelect();\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n    <>\r\n               <Divider variant=\"inset\" component=\"li\" />\r\n        <ListItem key={friend._id} alignItems=\"flex-start\" onClick={() => handleClick()} style={{ backgroundColor: isSelected ? 'lightgray' : 'transparent' ,borderRadius: '10px' }} >\r\n            <ListItemAvatar>\r\n                <Avatar alt={friend.name} src={friend.avatar} />\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n                primary={friend.name}\r\n                secondary={\r\n\r\n                    <>\r\n\r\n                        <Typography\r\n                            sx={{ display: 'inline' }}\r\n                            component=\"span\"\r\n                            variant=\"body2\"\r\n                            color=\"text.primary\"\r\n                        >\r\n\r\n                            {lastMessage.userId === null ? \"\" : friend.name}\r\n                        </Typography>\r\n                        {lastMessage.userId === null ? \"Start a chat with \" + friend.name : \" : \" + lastMessage.content}\r\n\r\n                    </>\r\n\r\n                }\r\n            />\r\n        </ListItem>\r\n        </>\r\n    )\r\n}\r\nexport default ChatUnit;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}