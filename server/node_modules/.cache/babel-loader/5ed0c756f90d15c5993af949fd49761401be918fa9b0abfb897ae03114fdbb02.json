{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  currentChat: null,\n  currentChatContent: {\n    messages: []\n  }\n};\nexport const chatSlice = createSlice({\n  name: 'chat',\n  initialState,\n  reducers: {\n    setCurrentChat: (state, action) => {\n      state.currentChat = action.payload;\n    },\n    setCurrentChatContent: (state, action) => {\n      state.currentChatContent = action.payload;\n    },\n    addMessage: (state, action) => {\n      state.currentChatContent.messages.push(action.payload);\n    },\n    removeMessage: (state, action) => {\n      state.currentChatContent.messages = state.currentChatContent.messages.filter(message => message.id !== action.payload.id);\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  setCurrentChat,\n  setCurrentChatContent,\n  addMessage\n} = chatSlice.actions;\nexport default chatSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","currentChat","currentChatContent","messages","chatSlice","name","reducers","setCurrentChat","state","action","payload","setCurrentChatContent","addMessage","push","removeMessage","filter","message","id","actions","reducer"],"sources":["C:/Users/Naor/Desktop/code/Summer Projects/SocialPlace/social/src/features/chatSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    currentChat: null,\r\n    currentChatContent: {\r\n        messages: []\r\n    }\r\n};\r\n\r\nexport const chatSlice = createSlice({\r\n    name: 'chat',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentChat: (state, action) => {\r\n            state.currentChat = action.payload;\r\n        },\r\n        setCurrentChatContent: (state, action) => {\r\n            state.currentChatContent = action.payload;\r\n        },\r\n        addMessage: (state, action) => {\r\n            state.currentChatContent.messages.push(action.payload);\r\n        },\r\n        removeMessage: (state, action) => {\r\n            state.currentChatContent.messages = state.currentChatContent.messages.filter(message => message.id !== action.payload.id);\r\n        }\r\n    },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { setCurrentChat, setCurrentChatContent, addMessage } = chatSlice.actions;\r\n\r\nexport default chatSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,IAAI;EACjBC,kBAAkB,EAAE;IAChBC,QAAQ,EAAE;EACd;AACJ,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACNC,cAAc,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACP,WAAW,GAAGQ,MAAM,CAACC,OAAO;IACtC,CAAC;IACDC,qBAAqB,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACtCD,KAAK,CAACN,kBAAkB,GAAGO,MAAM,CAACC,OAAO;IAC7C,CAAC;IACDE,UAAU,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC3BD,KAAK,CAACN,kBAAkB,CAACC,QAAQ,CAACU,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IAC1D,CAAC;IACDI,aAAa,EAAEA,CAACN,KAAK,EAAEC,MAAM,KAAK;MAC9BD,KAAK,CAACN,kBAAkB,CAACC,QAAQ,GAAGK,KAAK,CAACN,kBAAkB,CAACC,QAAQ,CAACY,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAACO,EAAE,CAAC;IAC7H;EACJ;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEV,cAAc;EAAEI,qBAAqB;EAAEC;AAAW,CAAC,GAAGR,SAAS,CAACc,OAAO;AAEtF,eAAed,SAAS,CAACe,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}